
NIOSTUT.elf:     file format elf32-littlenios2
NIOSTUT.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x000001f4 memsz 0x000001f4 flags r-x
    LOAD off    0x00001214 vaddr 0x00001214 paddr 0x00001218 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000121c vaddr 0x0000121c paddr 0x0000121c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000001dc  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  000011fc  000011fc  000011fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  00001214  00001218  00001214  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  0000121c  0000121c  0000121c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  00001240  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000001bb  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000098a  00000000  00000000  00001563  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000523  00000000  00000000  00001eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000015e2  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000188  00000000  00000000  000039f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000004dc  00000000  00000000  00003b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000011b  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00004174  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  00004188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00004ef2  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000f  00000000  00000000  00004ef5  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00004f04  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00004f05  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  00004f06  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  00004f0f  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  00004f18  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000b  00000000  00000000  00004f21  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000018  00000000  00000000  00004f2c  2**0
                  CONTENTS, READONLY
 25 .jdi          0000536c  00000000  00000000  00004f44  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002c0e6  00000000  00000000  0000a2b0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .text	00000000 .text
000011fc l    d  .rodata	00000000 .rodata
00001214 l    d  .rwdata	00000000 .rwdata
0000121c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00001084 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00001110 g     F .text	0000002c alt_main
00001218 g       *ABS*	00000000 __flash_rwdata_start
0000113c g     F .text	00000038 alt_putstr
00001214 g     O .rwdata	00000004 jtag_uart
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001220 g     O .bss	00000004 alt_argv
00009214 g       *ABS*	00000000 _gp
00001228 g       *ABS*	00000000 __bss_end
000011cc g     F .text	00000004 alt_dcache_flush_all
00001218 g       *ABS*	00000000 __ram_rwdata_end
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory
00001214 g       *ABS*	00000000 __ram_rodata_end
00001228 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001198 g     F .text	00000034 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
00001174 g     F .text	00000004 alt_sys_init
00001214 g       *ABS*	00000000 __ram_rwdata_start
000011fc g       *ABS*	00000000 __ram_rodata_start
00001228 g       *ABS*	00000000 __alt_stack_base
0000121c g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000028 main
00001224 g     O .bss	00000004 alt_envp
000011fc g       *ABS*	00000000 __flash_rodata_start
00001178 g     F .text	00000020 alt_irq_init
0000121c g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001218 g       *ABS*	00000000 _edata
00001228 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
000011d4 g     F .text	00000008 altera_nios2_qsys_irq_init
0000100c g       .entry	00000000 exit
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000011dc g     F .text	00000020 strlen
000011d0 g     F .text	00000004 alt_icache_flush_all
000010a4 g     F .text	0000006c alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a48514 	ori	gp,gp,37396
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10848714 	ori	r2,r2,4636

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c48a14 	ori	r3,r3,4648

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00010a40 	call	10a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00011100 	call	1110 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <alt_after_alt_main>

0000105c <main>:
#include <ctype.h>  // needed for toupper() but not used here
#include <unistd.h> // contains usleep function


int main()
{ 
    105c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    1060:	01000034 	movhi	r4,0
    1064:	21047f04 	addi	r4,r4,4604
#include <ctype.h>  // needed for toupper() but not used here
#include <unistd.h> // contains usleep function


int main()
{ 
    1068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    106c:	000113c0 	call	113c <alt_putstr>
    1070:	00cc0004 	movi	r3,12288
    1074:	010c0404 	movi	r4,12304

  int x;
  /* Event loop never exits. */
  while (1)
  {
  	  x = IORD_8DIRECT(SWITCHES_BASE, 0);
    1078:	20800023 	ldbuio	r2,0(r4)
  	  IOWR_8DIRECT(LEDS_BASE, 0, x);
    107c:	18800025 	stbio	r2,0(r3)
    1080:	003ffd06 	br	1078 <main+0x1c>

00001084 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1084:	2900051e 	bne	r5,r4,109c <alt_load_section+0x18>
    1088:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    108c:	20800017 	ldw	r2,0(r4)
    1090:	21000104 	addi	r4,r4,4
    1094:	28800015 	stw	r2,0(r5)
    1098:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    109c:	29bffb1e 	bne	r5,r6,108c <alt_load_section+0x8>
    10a0:	f800283a 	ret

000010a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    10a4:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    10a8:	01000034 	movhi	r4,0
    10ac:	21048604 	addi	r4,r4,4632
    10b0:	01400034 	movhi	r5,0
    10b4:	29448504 	addi	r5,r5,4628
    10b8:	01800034 	movhi	r6,0
    10bc:	31848604 	addi	r6,r6,4632
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    10c0:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    10c4:	00010840 	call	1084 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    10c8:	01000034 	movhi	r4,0
    10cc:	21040804 	addi	r4,r4,4128
    10d0:	01400034 	movhi	r5,0
    10d4:	29440804 	addi	r5,r5,4128
    10d8:	01800034 	movhi	r6,0
    10dc:	31840804 	addi	r6,r6,4128
    10e0:	00010840 	call	1084 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    10e4:	01000034 	movhi	r4,0
    10e8:	21047f04 	addi	r4,r4,4604
    10ec:	01400034 	movhi	r5,0
    10f0:	29447f04 	addi	r5,r5,4604
    10f4:	01800034 	movhi	r6,0
    10f8:	31848504 	addi	r6,r6,4628
    10fc:	00010840 	call	1084 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1100:	00011cc0 	call	11cc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1104:	dfc00017 	ldw	ra,0(sp)
    1108:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    110c:	00011d01 	jmpi	11d0 <alt_icache_flush_all>

00001110 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1110:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1114:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1118:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    111c:	00011780 	call	1178 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1120:	00011740 	call	1174 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1124:	d1200217 	ldw	r4,-32760(gp)
    1128:	d1600317 	ldw	r5,-32756(gp)
    112c:	d1a00417 	ldw	r6,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1130:	dfc00017 	ldw	ra,0(sp)
    1134:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1138:	000105c1 	jmpi	105c <main>

0000113c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    113c:	defffe04 	addi	sp,sp,-8
    1140:	dc000015 	stw	r16,0(sp)
    1144:	dfc00115 	stw	ra,4(sp)
    1148:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    114c:	00011dc0 	call	11dc <strlen>
    1150:	800b883a 	mov	r5,r16
    1154:	100d883a 	mov	r6,r2
    1158:	01000034 	movhi	r4,0
    115c:	21048504 	addi	r4,r4,4628
    1160:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    1164:	dfc00117 	ldw	ra,4(sp)
    1168:	dc000017 	ldw	r16,0(sp)
    116c:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1170:	00011981 	jmpi	1198 <altera_avalon_jtag_uart_write>

00001174 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
    1174:	f800283a 	ret

00001178 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1178:	deffff04 	addi	sp,sp,-4
    117c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
    1180:	00011d40 	call	11d4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1184:	00800044 	movi	r2,1
    1188:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    118c:	dfc00017 	ldw	ra,0(sp)
    1190:	dec00104 	addi	sp,sp,4
    1194:	f800283a 	ret

00001198 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1198:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    119c:	298f883a 	add	r7,r5,r6
    11a0:	20c00104 	addi	r3,r4,4
    11a4:	00000606 	br	11c0 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    11a8:	18800037 	ldwio	r2,0(r3)
    11ac:	10bfffec 	andhi	r2,r2,65535
    11b0:	10000326 	beq	r2,zero,11c0 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    11b4:	28800007 	ldb	r2,0(r5)
    11b8:	29400044 	addi	r5,r5,1
    11bc:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    11c0:	29fff936 	bltu	r5,r7,11a8 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    11c4:	3005883a 	mov	r2,r6
    11c8:	f800283a 	ret

000011cc <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    11cc:	f800283a 	ret

000011d0 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    11d0:	f800283a 	ret

000011d4 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    11d4:	000170fa 	wrctl	ienable,zero
}
    11d8:	f800283a 	ret

000011dc <strlen>:
    11dc:	20800007 	ldb	r2,0(r4)
    11e0:	10000526 	beq	r2,zero,11f8 <strlen+0x1c>
    11e4:	2007883a 	mov	r3,r4
    11e8:	18c00044 	addi	r3,r3,1
    11ec:	18800007 	ldb	r2,0(r3)
    11f0:	103ffd1e 	bne	r2,zero,11e8 <strlen+0xc>
    11f4:	1905c83a 	sub	r2,r3,r4
    11f8:	f800283a 	ret
