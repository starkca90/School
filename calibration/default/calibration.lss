
calibration.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000446  00800060  000016d6  0000176a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  008004a6  008004a6  00001bb0  2**0
                  ALLOC
  3 .stab         00000f3c  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000328  00000000  00000000  00002aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000208  00000000  00000000  00002e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000334  00000000  00000000  0000301c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000022ab  00000000  00000000  00003350  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001256  00000000  00000000  000055fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000262d  00000000  00000000  00006851  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000370  00000000  00000000  00008e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000754  00000000  00000000  000091f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001726  00000000  00000000  00009944  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000350  00000000  00000000  0000b06a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000148  00000000  00000000  0000b3ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
       4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__c.2055>:
      54:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000060 <__ctors_end>:
      60:	11 24       	eor	r1, r1
      62:	1f be       	out	0x3f, r1	; 63
      64:	cf e5       	ldi	r28, 0x5F	; 95
      66:	d8 e0       	ldi	r29, 0x08	; 8
      68:	de bf       	out	0x3e, r29	; 62
      6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
      6c:	14 e0       	ldi	r17, 0x04	; 4
      6e:	a0 e6       	ldi	r26, 0x60	; 96
      70:	b0 e0       	ldi	r27, 0x00	; 0
      72:	e6 ed       	ldi	r30, 0xD6	; 214
      74:	f6 e1       	ldi	r31, 0x16	; 22
      76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
      78:	05 90       	lpm	r0, Z+
      7a:	0d 92       	st	X+, r0
      7c:	a6 3a       	cpi	r26, 0xA6	; 166
      7e:	b1 07       	cpc	r27, r17
      80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>

00000082 <__do_clear_bss>:
      82:	14 e0       	ldi	r17, 0x04	; 4
      84:	a6 ea       	ldi	r26, 0xA6	; 166
      86:	b4 e0       	ldi	r27, 0x04	; 4
      88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
      8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
      8c:	a3 3e       	cpi	r26, 0xE3	; 227
      8e:	b1 07       	cpc	r27, r17
      90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
      92:	0e 94 26 01 	call	0x24c	; 0x24c <main>
      96:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <_exit>

0000009a <__bad_interrupt>:
      9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <camInit>:
RETURNS:	VOID
*/
void camInit(void)
{
	// Make PortA all inputs
	DDRA = 0x00;  
      9e:	1a ba       	out	0x1a, r1	; 26
	// Enable Pull-up Resistors on A
	PORTA = 0xFF;
      a0:	8f ef       	ldi	r24, 0xFF	; 255
      a2:	8b bb       	out	0x1b, r24	; 27

	// Allow HREF, VSYNC and PCLK inputs on D
	DDRD &= ~((1<<PD6) | (1<<PD3) | (1<<PD2));
      a4:	81 b3       	in	r24, 0x11	; 17
      a6:	83 7b       	andi	r24, 0xB3	; 179
      a8:	81 bb       	out	0x11, r24	; 17
	// Enable Pull-up resistors on those
	PORTD |= (1<<PD6) | (1<<PD3) | (1<<PD2);
      aa:	82 b3       	in	r24, 0x12	; 18
      ac:	8c 64       	ori	r24, 0x4C	; 76
      ae:	82 bb       	out	0x12, r24	; 18
}
      b0:	08 95       	ret

000000b2 <readPixels>:
	uint8_t pixels = 0; 
	int average = 0;

	// Loop until VSYNC pulses
		// Low
	while(!(PIND & 1<<PD6));
      b2:	86 9b       	sbis	0x10, 6	; 16
      b4:	fe cf       	rjmp	.-4      	; 0xb2 <readPixels>
		// High
	while(PIND & 1<<PD6);
      b6:	86 99       	sbic	0x10, 6	; 16
      b8:	fe cf       	rjmp	.-4      	; 0xb6 <readPixels+0x4>
      ba:	80 e0       	ldi	r24, 0x00	; 0
	// Let HREF Pulse a few times untill the middle
	// of the frame is reached
	for(rows = 0; rows < MIDROW; rows++)
	{
		// HREF becomes high
		while(!(PIND & 1<<PD3));
      bc:	83 9b       	sbis	0x10, 3	; 16
      be:	fe cf       	rjmp	.-4      	; 0xbc <readPixels+0xa>
		while(PIND & 1<<PD3);
      c0:	83 99       	sbic	0x10, 3	; 16
      c2:	fe cf       	rjmp	.-4      	; 0xc0 <readPixels+0xe>
	while(PIND & 1<<PD6);

	// New frame is about to come out
	// Let HREF Pulse a few times untill the middle
	// of the frame is reached
	for(rows = 0; rows < MIDROW; rows++)
      c4:	8f 5f       	subi	r24, 0xFF	; 255
      c6:	88 35       	cpi	r24, 0x58	; 88
      c8:	c9 f7       	brne	.-14     	; 0xbc <readPixels+0xa>
		while(PIND & 1<<PD3);
	}

	// Do not necessarily require this, but wait until HREF is high
	// which means row is being sent out.
	while(!(PIND & 1<<PD3));
      ca:	83 9b       	sbis	0x10, 3	; 16
      cc:	fe cf       	rjmp	.-4      	; 0xca <readPixels+0x18>
      ce:	80 e0       	ldi	r24, 0x00	; 0

	// At the center row, goto center columns
	for(cols = 0; cols < MIDCOL; cols++)
	{
		// PCLK Pulses
		while(!(PIND & 1<<PD2));
      d0:	82 9b       	sbis	0x10, 2	; 16
      d2:	fe cf       	rjmp	.-4      	; 0xd0 <readPixels+0x1e>
		while(PIND & 1<<PD2);
      d4:	82 99       	sbic	0x10, 2	; 16
      d6:	fe cf       	rjmp	.-4      	; 0xd4 <readPixels+0x22>
	// Do not necessarily require this, but wait until HREF is high
	// which means row is being sent out.
	while(!(PIND & 1<<PD3));

	// At the center row, goto center columns
	for(cols = 0; cols < MIDCOL; cols++)
      d8:	8f 5f       	subi	r24, 0xFF	; 255
      da:	88 34       	cpi	r24, 0x48	; 72
      dc:	c9 f7       	brne	.-14     	; 0xd0 <readPixels+0x1e>
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	20 e0       	ldi	r18, 0x00	; 0
	// Arrived at pretty close to dead center of frame, start to 
	// Read pixel data from PINA.
	for(pixels = 0; pixels < MAXPIXELS; pixels++)
	{
		// Wait for rising edge of PCLK
		while(!(PIND & 1<<PD2));
      e4:	82 9b       	sbis	0x10, 2	; 16
      e6:	fe cf       	rjmp	.-4      	; 0xe4 <readPixels+0x32>
		average += PINA;
      e8:	39 b3       	in	r19, 0x19	; 25
      ea:	83 0f       	add	r24, r19
      ec:	91 1d       	adc	r25, r1
		while(PIND & 1<<PD2);
	}

	// Arrived at pretty close to dead center of frame, start to 
	// Read pixel data from PINA.
	for(pixels = 0; pixels < MAXPIXELS; pixels++)
      ee:	2f 5f       	subi	r18, 0xFF	; 255
      f0:	25 30       	cpi	r18, 0x05	; 5
      f2:	c1 f7       	brne	.-16     	; 0xe4 <readPixels+0x32>
		average += PINA;
	}

	// At this point, average holds the sum of MAXPIXELS points
	// We want the average of these points
	return average/MAXPIXELS;
      f4:	65 e0       	ldi	r22, 0x05	; 5
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	0e 94 a5 04 	call	0x94a	; 0x94a <__divmodhi4>
}
      fc:	86 2f       	mov	r24, r22
      fe:	08 95       	ret

00000100 <countDown>:
			calibration is about to begin.
PARAMETERS: uint8_t delay: How big of a countdown should there be?
RETURNS:	VOID
*/
void countDown(uint8_t delay)
{
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	18 2f       	mov	r17, r24
	for(;delay > 0; delay--)
	{
		// Print how many seconds are left
		printf("%u.. ", delay);
     108:	c0 e6       	ldi	r28, 0x60	; 96
     10a:	d0 e0       	ldi	r29, 0x00	; 0
PARAMETERS: uint8_t delay: How big of a countdown should there be?
RETURNS:	VOID
*/
void countDown(uint8_t delay)
{
	for(;delay > 0; delay--)
     10c:	1d c0       	rjmp	.+58     	; 0x148 <countDown+0x48>
	{
		// Print how many seconds are left
		printf("%u.. ", delay);
     10e:	00 d0       	rcall	.+0      	; 0x110 <countDown+0x10>
     110:	00 d0       	rcall	.+0      	; 0x112 <countDown+0x12>
     112:	ed b7       	in	r30, 0x3d	; 61
     114:	fe b7       	in	r31, 0x3e	; 62
     116:	31 96       	adiw	r30, 0x01	; 1
     118:	ad b7       	in	r26, 0x3d	; 61
     11a:	be b7       	in	r27, 0x3e	; 62
     11c:	12 96       	adiw	r26, 0x02	; 2
     11e:	dc 93       	st	X, r29
     120:	ce 93       	st	-X, r28
     122:	11 97       	sbiw	r26, 0x01	; 1
     124:	12 83       	std	Z+2, r17	; 0x02
     126:	13 82       	std	Z+3, r1	; 0x03
     128:	0e 94 11 05 	call	0xa22	; 0xa22 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12c:	8f ef       	ldi	r24, 0xFF	; 255
     12e:	93 ed       	ldi	r25, 0xD3	; 211
     130:	a0 e3       	ldi	r26, 0x30	; 48
     132:	81 50       	subi	r24, 0x01	; 1
     134:	90 40       	sbci	r25, 0x00	; 0
     136:	a0 40       	sbci	r26, 0x00	; 0
     138:	e1 f7       	brne	.-8      	; 0x132 <countDown+0x32>
     13a:	00 c0       	rjmp	.+0      	; 0x13c <countDown+0x3c>
     13c:	00 00       	nop
PARAMETERS: uint8_t delay: How big of a countdown should there be?
RETURNS:	VOID
*/
void countDown(uint8_t delay)
{
	for(;delay > 0; delay--)
     13e:	11 50       	subi	r17, 0x01	; 1
     140:	0f 90       	pop	r0
     142:	0f 90       	pop	r0
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	11 23       	and	r17, r17
     14a:	09 f7       	brne	.-62     	; 0x10e <countDown+0xe>
		printf("%u.. ", delay);
		// One Second Delay
		_delay_ms(1000);
	}
	// Seconds were printed all in one line, break that up
	printf("\n");
     14c:	8a e0       	ldi	r24, 0x0A	; 10
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 26 05 	call	0xa4c	; 0xa4c <putchar>
}
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	1f 91       	pop	r17
     15a:	08 95       	ret

0000015c <camCal>:
			values, then returned for usage later on.
PARAMETERS:	VOID
RETURNS:	uint8_t: Average of B&W values (Threashold)
*/
uint8_t camCal(void)
{	
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
	
	printf("About to calibrate for BLACK. Place BLACK paper in front of camera...\n");
     164:	86 e6       	ldi	r24, 0x66	; 102
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 2d 05 	call	0xa5a	; 0xa5a <puts>
	countDown(CALDELAY);
     16c:	85 e0       	ldi	r24, 0x05	; 5
     16e:	0e 94 80 00 	call	0x100	; 0x100 <countDown>
	uint8_t black = readPixels();
     172:	0e 94 59 00 	call	0xb2	; 0xb2 <readPixels>
	printf("BLACK now calibrated. BLACK value = 0x%X\n", black);
     176:	c8 2f       	mov	r28, r24
     178:	d0 e0       	ldi	r29, 0x00	; 0
     17a:	00 d0       	rcall	.+0      	; 0x17c <camCal+0x20>
     17c:	00 d0       	rcall	.+0      	; 0x17e <camCal+0x22>
     17e:	8c ea       	ldi	r24, 0xAC	; 172
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	ed b7       	in	r30, 0x3d	; 61
     184:	fe b7       	in	r31, 0x3e	; 62
     186:	92 83       	std	Z+2, r25	; 0x02
     188:	81 83       	std	Z+1, r24	; 0x01
     18a:	d4 83       	std	Z+4, r29	; 0x04
     18c:	c3 83       	std	Z+3, r28	; 0x03
     18e:	0e 94 11 05 	call	0xa22	; 0xa22 <printf>

	printf("About to calibrate for WHITE. Place WHITE paper in front of camera...\n");
     192:	0f 90       	pop	r0
     194:	0f 90       	pop	r0
     196:	0f 90       	pop	r0
     198:	0f 90       	pop	r0
     19a:	86 ed       	ldi	r24, 0xD6	; 214
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <puts>
	countDown(CALDELAY);
     1a2:	85 e0       	ldi	r24, 0x05	; 5
     1a4:	0e 94 80 00 	call	0x100	; 0x100 <countDown>
	uint8_t white = readPixels();
     1a8:	0e 94 59 00 	call	0xb2	; 0xb2 <readPixels>
	printf("WHITE now calibrated. WHITE value = 0x%X\n", white);
     1ac:	08 2f       	mov	r16, r24
     1ae:	10 e0       	ldi	r17, 0x00	; 0
     1b0:	00 d0       	rcall	.+0      	; 0x1b2 <camCal+0x56>
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <camCal+0x58>
     1b4:	8c e1       	ldi	r24, 0x1C	; 28
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	ed b7       	in	r30, 0x3d	; 61
     1ba:	fe b7       	in	r31, 0x3e	; 62
     1bc:	92 83       	std	Z+2, r25	; 0x02
     1be:	81 83       	std	Z+1, r24	; 0x01
     1c0:	14 83       	std	Z+4, r17	; 0x04
     1c2:	03 83       	std	Z+3, r16	; 0x03
     1c4:	0e 94 11 05 	call	0xa22	; 0xa22 <printf>

	threshold = (black + white) / 2;
     1c8:	c0 0f       	add	r28, r16
     1ca:	d1 1f       	adc	r29, r17
     1cc:	d5 95       	asr	r29
     1ce:	c7 95       	ror	r28
     1d0:	c0 93 a6 04 	sts	0x04A6, r28
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	0f 90       	pop	r0

	return threshold;
}
     1dc:	8c 2f       	mov	r24, r28
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	1f 91       	pop	r17
     1e4:	0f 91       	pop	r16
     1e6:	08 95       	ret

000001e8 <calCheck>:
			and a 1 for WHITE.
PARAMETERS:	VOID
RETURNS:	uint8_t: 0 for BLACK; 1 for WHITE 
*/
uint8_t calCheck(void)
{
     1e8:	1f 93       	push	r17
	uint8_t value = readPixels();
     1ea:	0e 94 59 00 	call	0xb2	; 0xb2 <readPixels>
     1ee:	18 2f       	mov	r17, r24

	printf("Item Value = 0x%X\n", value);	
     1f0:	00 d0       	rcall	.+0      	; 0x1f2 <calCheck+0xa>
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <calCheck+0xc>
     1f4:	ed b7       	in	r30, 0x3d	; 61
     1f6:	fe b7       	in	r31, 0x3e	; 62
     1f8:	31 96       	adiw	r30, 0x01	; 1
     1fa:	26 e4       	ldi	r18, 0x46	; 70
     1fc:	31 e0       	ldi	r19, 0x01	; 1
     1fe:	ad b7       	in	r26, 0x3d	; 61
     200:	be b7       	in	r27, 0x3e	; 62
     202:	12 96       	adiw	r26, 0x02	; 2
     204:	3c 93       	st	X, r19
     206:	2e 93       	st	-X, r18
     208:	11 97       	sbiw	r26, 0x01	; 1
     20a:	82 83       	std	Z+2, r24	; 0x02
     20c:	13 82       	std	Z+3, r1	; 0x03
     20e:	0e 94 11 05 	call	0xa22	; 0xa22 <printf>

	if(threshold == 0)
     212:	90 91 a6 04 	lds	r25, 0x04A6
     216:	0f 90       	pop	r0
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
     21c:	0f 90       	pop	r0
     21e:	99 23       	and	r25, r25
     220:	29 f0       	breq	.+10     	; 0x22c <calCheck+0x44>
		value = NOCAL;
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	91 17       	cp	r25, r17
     226:	18 f0       	brcs	.+6      	; 0x22e <calCheck+0x46>
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	01 c0       	rjmp	.+2      	; 0x22e <calCheck+0x46>
     22c:	83 e0       	ldi	r24, 0x03	; 3
		value = WHITE;
	else
		value = BLACK;

	return value;
}
     22e:	1f 91       	pop	r17
     230:	08 95       	ret

00000232 <camTwiInit>:
// Commands size for IO operations,
#define COMMAND 8

void camTwiInit(void)
{
	TWIwrite(0x39, 0x40);
     232:	89 e3       	ldi	r24, 0x39	; 57
     234:	60 e4       	ldi	r22, 0x40	; 64
     236:	0e 94 66 03 	call	0x6cc	; 0x6cc <TWIwrite>
	TWIwrite(0x14, 0x20);
     23a:	84 e1       	ldi	r24, 0x14	; 20
     23c:	60 e2       	ldi	r22, 0x20	; 32
     23e:	0e 94 66 03 	call	0x6cc	; 0x6cc <TWIwrite>
	TWIwrite(0x11, 0x08);
     242:	81 e1       	ldi	r24, 0x11	; 17
     244:	68 e0       	ldi	r22, 0x08	; 8
     246:	0e 94 66 03 	call	0x6cc	; 0x6cc <TWIwrite>
}
     24a:	08 95       	ret

0000024c <main>:
*
*	RETURNS: exit code integer, however, should nver
*				return
*/
int main(void)
{
     24c:	2f 92       	push	r2
     24e:	3f 92       	push	r3
     250:	4f 92       	push	r4
     252:	5f 92       	push	r5
     254:	6f 92       	push	r6
     256:	7f 92       	push	r7
     258:	8f 92       	push	r8
     25a:	9f 92       	push	r9
     25c:	af 92       	push	r10
     25e:	bf 92       	push	r11
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	df 93       	push	r29
     26e:	cf 93       	push	r28
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
     274:	ee 97       	sbiw	r28, 0x3e	; 62
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	cd bf       	out	0x3d, r28	; 61

// Create buffer to store input string
	char input[MAX_BUFFER_SIZE];
	// Initialize UART
	uart_init();
     280:	0e 94 34 04 	call	0x868	; 0x868 <uart_init>

	initServo();
     284:	0e 94 81 02 	call	0x502	; 0x502 <initServo>

	TWIinit();
     288:	0e 94 18 03 	call	0x630	; 0x630 <TWIinit>

	camTwiInit();
     28c:	0e 94 19 01 	call	0x232	; 0x232 <camTwiInit>

	camInit();
     290:	0e 94 4f 00 	call	0x9e	; 0x9e <camInit>
		command[0] ='\0';
		regAddress = '\0';
		data = '\0';

		// Input string is not empty, read it in
		if(fgets(input,MAX_BUFFER_SIZE,stdin) != NULL)
     294:	4d e0       	ldi	r20, 0x0D	; 13
     296:	c4 2e       	mov	r12, r20
     298:	d1 2c       	mov	r13, r1
     29a:	cc 0e       	add	r12, r28
     29c:	dd 1e       	adc	r13, r29
		{
			// Process input string into 3 individual components
			sscanf(input, "%s %i %i",command, &regAddress, &data);
     29e:	39 e5       	ldi	r19, 0x59	; 89
     2a0:	a3 2e       	mov	r10, r19
     2a2:	31 e0       	ldi	r19, 0x01	; 1
     2a4:	b3 2e       	mov	r11, r19
     2a6:	8e 01       	movw	r16, r28
     2a8:	0b 5f       	subi	r16, 0xFB	; 251
     2aa:	1f 4f       	sbci	r17, 0xFF	; 255
     2ac:	4e 01       	movw	r8, r28
     2ae:	08 94       	sec
     2b0:	81 1c       	adc	r8, r1
     2b2:	91 1c       	adc	r9, r1
     2b4:	23 e0       	ldi	r18, 0x03	; 3
     2b6:	62 2e       	mov	r6, r18
     2b8:	71 2c       	mov	r7, r1
     2ba:	6c 0e       	add	r6, r28
     2bc:	7d 1e       	adc	r7, r29
					printf("Camera Register = 0x%X Now Contains 0x%X\n\n",regAddress,TWIread(regAddress));
				}

				else if(strcmp(command, "CALCAM") == 0)
				{
					printf("Calibration Completed: Threshold = 0x%X\n\n", camCal());
     2be:	9f ef       	ldi	r25, 0xFF	; 255
     2c0:	49 2e       	mov	r4, r25
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	59 2e       	mov	r5, r25
				// Write to Camera Register
				else if(strcmp(command, "WRCAMREG") == 0)
				{
					TWIwrite(regAddress, data);
					printf("Write Done, Verifying\n");
					printf("Camera Register = 0x%X Now Contains 0x%X\n\n",regAddress,TWIread(regAddress));
     2c6:	8d ec       	ldi	r24, 0xCD	; 205
     2c8:	28 2e       	mov	r2, r24
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	38 2e       	mov	r3, r24

	// Loop forever
	for(;;)
	{
		// Clear variable for debug
		command[0] ='\0';
     2ce:	1d 82       	std	Y+5, r1	; 0x05
		regAddress = '\0';
     2d0:	1a 82       	std	Y+2, r1	; 0x02
     2d2:	19 82       	std	Y+1, r1	; 0x01
		data = '\0';
     2d4:	1c 82       	std	Y+4, r1	; 0x04
     2d6:	1b 82       	std	Y+3, r1	; 0x03

		// Input string is not empty, read it in
		if(fgets(input,MAX_BUFFER_SIZE,stdin) != NULL)
     2d8:	40 91 dd 04 	lds	r20, 0x04DD
     2dc:	50 91 de 04 	lds	r21, 0x04DE
     2e0:	c6 01       	movw	r24, r12
     2e2:	62 e3       	ldi	r22, 0x32	; 50
     2e4:	70 e0       	ldi	r23, 0x00	; 0
     2e6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <fgets>
     2ea:	00 97       	sbiw	r24, 0x00	; 0
     2ec:	81 f3       	breq	.-32     	; 0x2ce <main+0x82>
		{
			// Process input string into 3 individual components
			sscanf(input, "%s %i %i",command, &regAddress, &data);
     2ee:	2d b7       	in	r18, 0x3d	; 61
     2f0:	3e b7       	in	r19, 0x3e	; 62
     2f2:	2a 50       	subi	r18, 0x0A	; 10
     2f4:	30 40       	sbci	r19, 0x00	; 0
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	3e bf       	out	0x3e, r19	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	2d bf       	out	0x3d, r18	; 61
     300:	ed b7       	in	r30, 0x3d	; 61
     302:	fe b7       	in	r31, 0x3e	; 62
     304:	31 96       	adiw	r30, 0x01	; 1
     306:	ad b7       	in	r26, 0x3d	; 61
     308:	be b7       	in	r27, 0x3e	; 62
     30a:	12 96       	adiw	r26, 0x02	; 2
     30c:	dc 92       	st	X, r13
     30e:	ce 92       	st	-X, r12
     310:	11 97       	sbiw	r26, 0x01	; 1
     312:	b3 82       	std	Z+3, r11	; 0x03
     314:	a2 82       	std	Z+2, r10	; 0x02
     316:	15 83       	std	Z+5, r17	; 0x05
     318:	04 83       	std	Z+4, r16	; 0x04
     31a:	97 82       	std	Z+7, r9	; 0x07
     31c:	86 82       	std	Z+6, r8	; 0x06
     31e:	71 86       	std	Z+9, r7	; 0x09
     320:	60 86       	std	Z+8, r6	; 0x08
     322:	0e 94 62 05 	call	0xac4	; 0xac4 <sscanf>
     326:	78 01       	movw	r14, r16
			
			// Make the command string uppercase to process easier
			int i;
			for(i = 0; command[i]; i++)
     328:	ed b7       	in	r30, 0x3d	; 61
     32a:	fe b7       	in	r31, 0x3e	; 62
     32c:	3a 96       	adiw	r30, 0x0a	; 10
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	fe bf       	out	0x3e, r31	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	ed bf       	out	0x3d, r30	; 61
     338:	06 c0       	rjmp	.+12     	; 0x346 <main+0xfa>
			command[i] = toupper(command[i]);
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 cc 04 	call	0x998	; 0x998 <toupper>
     340:	d7 01       	movw	r26, r14
     342:	8d 93       	st	X+, r24
     344:	7d 01       	movw	r14, r26
			// Process input string into 3 individual components
			sscanf(input, "%s %i %i",command, &regAddress, &data);
			
			// Make the command string uppercase to process easier
			int i;
			for(i = 0; command[i]; i++)
     346:	f7 01       	movw	r30, r14
     348:	80 81       	ld	r24, Z
     34a:	88 23       	and	r24, r24
     34c:	b1 f7       	brne	.-20     	; 0x33a <main+0xee>

			// Command is not blank
			if(command != '\0')
			{
				// Read from IO address
				if(strcmp(command, "RIO") == 0)
     34e:	c8 01       	movw	r24, r16
     350:	62 e6       	ldi	r22, 0x62	; 98
     352:	71 e0       	ldi	r23, 0x01	; 1
     354:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <strcmp>
     358:	00 97       	sbiw	r24, 0x00	; 0
     35a:	29 f4       	brne	.+10     	; 0x366 <main+0x11a>
				{
					readIO(regAddress);
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	9a 81       	ldd	r25, Y+2	; 0x02
     360:	0e 94 4e 04 	call	0x89c	; 0x89c <readIO>
     364:	b4 cf       	rjmp	.-152    	; 0x2ce <main+0x82>
				}

				// Write to IO address
				else if(strcmp(command, "WIO") == 0)
     366:	c8 01       	movw	r24, r16
     368:	66 e6       	ldi	r22, 0x66	; 102
     36a:	71 e0       	ldi	r23, 0x01	; 1
     36c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <strcmp>
     370:	00 97       	sbiw	r24, 0x00	; 0
     372:	31 f4       	brne	.+12     	; 0x380 <main+0x134>
				{
					writeIO(regAddress, data);
     374:	89 81       	ldd	r24, Y+1	; 0x01
     376:	9a 81       	ldd	r25, Y+2	; 0x02
     378:	6b 81       	ldd	r22, Y+3	; 0x03
     37a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <writeIO>
     37e:	a7 cf       	rjmp	.-178    	; 0x2ce <main+0x82>
				}

				// Pan to position
				else if(strcmp(command, "PAN") == 0)
     380:	c8 01       	movw	r24, r16
     382:	6a e6       	ldi	r22, 0x6A	; 106
     384:	71 e0       	ldi	r23, 0x01	; 1
     386:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <strcmp>
     38a:	00 97       	sbiw	r24, 0x00	; 0
     38c:	29 f4       	brne	.+10     	; 0x398 <main+0x14c>
				{
					pan(regAddress);
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	9a 81       	ldd	r25, Y+2	; 0x02
     392:	0e 94 ac 02 	call	0x558	; 0x558 <pan>
     396:	0b c0       	rjmp	.+22     	; 0x3ae <main+0x162>
					printf("\n\n");
				}

				// Tilt to position
				else if(strcmp(command, "TILT") == 0)
     398:	c8 01       	movw	r24, r16
     39a:	60 e7       	ldi	r22, 0x70	; 112
     39c:	71 e0       	ldi	r23, 0x01	; 1
     39e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <strcmp>
     3a2:	00 97       	sbiw	r24, 0x00	; 0
     3a4:	39 f4       	brne	.+14     	; 0x3b4 <main+0x168>
				{
					tilt(regAddress);
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	9a 81       	ldd	r25, Y+2	; 0x02
     3aa:	0e 94 c9 02 	call	0x592	; 0x592 <tilt>
					printf("\n\n");
     3ae:	8e e6       	ldi	r24, 0x6E	; 110
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	94 c0       	rjmp	.+296    	; 0x4dc <main+0x290>
				}

				// Read Camera Register
				else if(strcmp(command, "RDCAMREG") == 0)
     3b4:	c8 01       	movw	r24, r16
     3b6:	65 e7       	ldi	r22, 0x75	; 117
     3b8:	71 e0       	ldi	r23, 0x01	; 1
     3ba:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <strcmp>
     3be:	00 97       	sbiw	r24, 0x00	; 0
     3c0:	11 f5       	brne	.+68     	; 0x406 <main+0x1ba>
				{
					printf("Camera Register = 0x%X  Register Value = 0x%X\n\n",regAddress,TWIread(regAddress));
     3c2:	e9 80       	ldd	r14, Y+1	; 0x01
     3c4:	fa 80       	ldd	r15, Y+2	; 0x02
     3c6:	8e 2d       	mov	r24, r14
     3c8:	0e 94 1b 03 	call	0x636	; 0x636 <TWIread>
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <main+0x182>
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <main+0x184>
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <main+0x186>
     3d2:	ed b7       	in	r30, 0x3d	; 61
     3d4:	fe b7       	in	r31, 0x3e	; 62
     3d6:	31 96       	adiw	r30, 0x01	; 1
     3d8:	2e e7       	ldi	r18, 0x7E	; 126
     3da:	31 e0       	ldi	r19, 0x01	; 1
     3dc:	ad b7       	in	r26, 0x3d	; 61
     3de:	be b7       	in	r27, 0x3e	; 62
     3e0:	12 96       	adiw	r26, 0x02	; 2
     3e2:	3c 93       	st	X, r19
     3e4:	2e 93       	st	-X, r18
     3e6:	11 97       	sbiw	r26, 0x01	; 1
     3e8:	e2 82       	std	Z+2, r14	; 0x02
     3ea:	f3 82       	std	Z+3, r15	; 0x03
     3ec:	84 83       	std	Z+4, r24	; 0x04
     3ee:	15 82       	std	Z+5, r1	; 0x05
     3f0:	0e 94 11 05 	call	0xa22	; 0xa22 <printf>
     3f4:	8d b7       	in	r24, 0x3d	; 61
     3f6:	9e b7       	in	r25, 0x3e	; 62
     3f8:	06 96       	adiw	r24, 0x06	; 6
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	9e bf       	out	0x3e, r25	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	8d bf       	out	0x3d, r24	; 61
     404:	64 cf       	rjmp	.-312    	; 0x2ce <main+0x82>
				}

				// Write to Camera Register
				else if(strcmp(command, "WRCAMREG") == 0)
     406:	c8 01       	movw	r24, r16
     408:	6e ea       	ldi	r22, 0xAE	; 174
     40a:	71 e0       	ldi	r23, 0x01	; 1
     40c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <strcmp>
     410:	00 97       	sbiw	r24, 0x00	; 0
     412:	41 f5       	brne	.+80     	; 0x464 <main+0x218>
				{
					TWIwrite(regAddress, data);
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	6b 81       	ldd	r22, Y+3	; 0x03
     418:	0e 94 66 03 	call	0x6cc	; 0x6cc <TWIwrite>
					printf("Write Done, Verifying\n");
     41c:	87 eb       	ldi	r24, 0xB7	; 183
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	0e 94 2d 05 	call	0xa5a	; 0xa5a <puts>
					printf("Camera Register = 0x%X Now Contains 0x%X\n\n",regAddress,TWIread(regAddress));
     424:	e9 80       	ldd	r14, Y+1	; 0x01
     426:	fa 80       	ldd	r15, Y+2	; 0x02
     428:	8e 2d       	mov	r24, r14
     42a:	0e 94 1b 03 	call	0x636	; 0x636 <TWIread>
     42e:	00 d0       	rcall	.+0      	; 0x430 <main+0x1e4>
     430:	00 d0       	rcall	.+0      	; 0x432 <main+0x1e6>
     432:	00 d0       	rcall	.+0      	; 0x434 <main+0x1e8>
     434:	ed b7       	in	r30, 0x3d	; 61
     436:	fe b7       	in	r31, 0x3e	; 62
     438:	31 96       	adiw	r30, 0x01	; 1
     43a:	ad b7       	in	r26, 0x3d	; 61
     43c:	be b7       	in	r27, 0x3e	; 62
     43e:	12 96       	adiw	r26, 0x02	; 2
     440:	3c 92       	st	X, r3
     442:	2e 92       	st	-X, r2
     444:	11 97       	sbiw	r26, 0x01	; 1
     446:	e2 82       	std	Z+2, r14	; 0x02
     448:	f3 82       	std	Z+3, r15	; 0x03
     44a:	84 83       	std	Z+4, r24	; 0x04
     44c:	15 82       	std	Z+5, r1	; 0x05
     44e:	0e 94 11 05 	call	0xa22	; 0xa22 <printf>
     452:	ed b7       	in	r30, 0x3d	; 61
     454:	fe b7       	in	r31, 0x3e	; 62
     456:	36 96       	adiw	r30, 0x06	; 6
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	fe bf       	out	0x3e, r31	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	ed bf       	out	0x3d, r30	; 61
     462:	35 cf       	rjmp	.-406    	; 0x2ce <main+0x82>
				}

				else if(strcmp(command, "CALCAM") == 0)
     464:	c8 01       	movw	r24, r16
     466:	68 ef       	ldi	r22, 0xF8	; 248
     468:	71 e0       	ldi	r23, 0x01	; 1
     46a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <strcmp>
     46e:	00 97       	sbiw	r24, 0x00	; 0
     470:	b1 f4       	brne	.+44     	; 0x49e <main+0x252>
				{
					printf("Calibration Completed: Threshold = 0x%X\n\n", camCal());
     472:	0e 94 ae 00 	call	0x15c	; 0x15c <camCal>
     476:	00 d0       	rcall	.+0      	; 0x478 <main+0x22c>
     478:	00 d0       	rcall	.+0      	; 0x47a <main+0x22e>
     47a:	ed b7       	in	r30, 0x3d	; 61
     47c:	fe b7       	in	r31, 0x3e	; 62
     47e:	31 96       	adiw	r30, 0x01	; 1
     480:	ad b7       	in	r26, 0x3d	; 61
     482:	be b7       	in	r27, 0x3e	; 62
     484:	12 96       	adiw	r26, 0x02	; 2
     486:	5c 92       	st	X, r5
     488:	4e 92       	st	-X, r4
     48a:	11 97       	sbiw	r26, 0x01	; 1
     48c:	82 83       	std	Z+2, r24	; 0x02
     48e:	13 82       	std	Z+3, r1	; 0x03
     490:	0e 94 11 05 	call	0xa22	; 0xa22 <printf>
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	18 cf       	rjmp	.-464    	; 0x2ce <main+0x82>
				}

				else if(strcmp(command, "CALVER") == 0)
     49e:	c8 01       	movw	r24, r16
     4a0:	69 e2       	ldi	r22, 0x29	; 41
     4a2:	72 e0       	ldi	r23, 0x02	; 2
     4a4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <strcmp>
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	b1 f4       	brne	.+44     	; 0x4d8 <main+0x28c>
				{
					printf("Place Paper In Front Of Camera...\n");
     4ac:	80 e3       	ldi	r24, 0x30	; 48
     4ae:	92 e0       	ldi	r25, 0x02	; 2
     4b0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <puts>
					countDown(5);
     4b4:	85 e0       	ldi	r24, 0x05	; 5
     4b6:	0e 94 80 00 	call	0x100	; 0x100 <countDown>
					uint8_t calVal = calCheck();
     4ba:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <calCheck>

					if(calVal == BLACK)
     4be:	88 23       	and	r24, r24
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <main+0x27c>
						printf("I Spy With My Little Eye Something BLACK.\n\n");
     4c2:	82 e5       	ldi	r24, 0x52	; 82
     4c4:	92 e0       	ldi	r25, 0x02	; 2
     4c6:	0a c0       	rjmp	.+20     	; 0x4dc <main+0x290>
					else if(calVal == WHITE)
     4c8:	81 30       	cpi	r24, 0x01	; 1
     4ca:	19 f4       	brne	.+6      	; 0x4d2 <main+0x286>
						printf("I Spy With My Little Eye Something WHITE.\n\n");
     4cc:	8d e7       	ldi	r24, 0x7D	; 125
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	05 c0       	rjmp	.+10     	; 0x4dc <main+0x290>
					else
						printf("Ummm, I Must Be Color Blind, Please Run calcam Please.\n\n");
     4d2:	88 ea       	ldi	r24, 0xA8	; 168
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <main+0x290>
				}

				// Something unwanted was entered
				else
				{
					printf("No Valid Function Found\n\n");
     4d8:	80 ee       	ldi	r24, 0xE0	; 224
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	0e 94 2d 05 	call	0xa5a	; 0xa5a <puts>
     4e0:	f6 ce       	rjmp	.-532    	; 0x2ce <main+0x82>

000004e2 <calcOCR>:
*
*	RETURNS: int: value that OCR should be set to.
*/
int calcOCR(int degree)
{
	degree=ICR_VALUE-(CALC_OFFSET+(CALC_MULT*degree));
     4e2:	46 ef       	ldi	r20, 0xF6	; 246
     4e4:	5f ef       	ldi	r21, 0xFF	; 255
     4e6:	84 9f       	mul	r24, r20
     4e8:	90 01       	movw	r18, r0
     4ea:	85 9f       	mul	r24, r21
     4ec:	30 0d       	add	r19, r0
     4ee:	94 9f       	mul	r25, r20
     4f0:	30 0d       	add	r19, r0
     4f2:	11 24       	eor	r1, r1
     4f4:	28 54       	subi	r18, 0x48	; 72
     4f6:	3b 4d       	sbci	r19, 0xDB	; 219
	return degree;
}
     4f8:	c9 01       	movw	r24, r18
     4fa:	08 95       	ret

000004fc <initServoPort>:
*
*	RETURNS: None
*/
void initServoPort(void)
{
	DDRD = (1<< PD5) | (1<<PD4);
     4fc:	80 e3       	ldi	r24, 0x30	; 48
     4fe:	81 bb       	out	0x11, r24	; 17

	return;
}
     500:	08 95       	ret

00000502 <initServo>:
*
*	RETURNS: None
*/
void initServo(void)
{
	TCCR1A = (1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1B0);
     502:	80 ef       	ldi	r24, 0xF0	; 240
     504:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<CS11) | (1<<WGM13);
     506:	82 e1       	ldi	r24, 0x12	; 18
     508:	8e bd       	out	0x2e, r24	; 46
	ICR1 = ICR_VALUE;
     50a:	80 e1       	ldi	r24, 0x10	; 16
     50c:	97 e2       	ldi	r25, 0x27	; 39
     50e:	97 bd       	out	0x27, r25	; 39
     510:	86 bd       	out	0x26, r24	; 38
*
*	RETURNS: int: value that OCR should be set to.
*/
int calcOCR(int degree)
{
	degree=ICR_VALUE-(CALC_OFFSET+(CALC_MULT*degree));
     512:	40 91 f9 02 	lds	r20, 0x02F9
     516:	50 91 fa 02 	lds	r21, 0x02FA
     51a:	26 ef       	ldi	r18, 0xF6	; 246
     51c:	3f ef       	ldi	r19, 0xFF	; 255
     51e:	42 9f       	mul	r20, r18
     520:	c0 01       	movw	r24, r0
     522:	43 9f       	mul	r20, r19
     524:	90 0d       	add	r25, r0
     526:	52 9f       	mul	r21, r18
     528:	90 0d       	add	r25, r0
     52a:	11 24       	eor	r1, r1
     52c:	88 54       	subi	r24, 0x48	; 72
     52e:	9b 4d       	sbci	r25, 0xDB	; 219
void initServo(void)
{
	TCCR1A = (1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1B0);
	TCCR1B = (1<<CS11) | (1<<WGM13);
	ICR1 = ICR_VALUE;
	PAN = calcOCR(PanVal);
     530:	9b bd       	out	0x2b, r25	; 43
     532:	8a bd       	out	0x2a, r24	; 42
*
*	RETURNS: int: value that OCR should be set to.
*/
int calcOCR(int degree)
{
	degree=ICR_VALUE-(CALC_OFFSET+(CALC_MULT*degree));
     534:	40 91 fb 02 	lds	r20, 0x02FB
     538:	50 91 fc 02 	lds	r21, 0x02FC
     53c:	42 9f       	mul	r20, r18
     53e:	c0 01       	movw	r24, r0
     540:	43 9f       	mul	r20, r19
     542:	90 0d       	add	r25, r0
     544:	52 9f       	mul	r21, r18
     546:	90 0d       	add	r25, r0
     548:	11 24       	eor	r1, r1
     54a:	88 54       	subi	r24, 0x48	; 72
     54c:	9b 4d       	sbci	r25, 0xDB	; 219
{
	TCCR1A = (1<<COM1A1) | (1<<COM1A0) | (1<<COM1B1) | (1<<COM1B0);
	TCCR1B = (1<<CS11) | (1<<WGM13);
	ICR1 = ICR_VALUE;
	PAN = calcOCR(PanVal);
	TILT = calcOCR(TiltVal);
     54e:	99 bd       	out	0x29, r25	; 41
     550:	88 bd       	out	0x28, r24	; 40
*
*	RETURNS: None
*/
void initServoPort(void)
{
	DDRD = (1<< PD5) | (1<<PD4);
     552:	80 e3       	ldi	r24, 0x30	; 48
     554:	81 bb       	out	0x11, r24	; 17
	TILT = calcOCR(TiltVal);
	
	initServoPort();
	
	return;	
}
     556:	08 95       	ret

00000558 <pan>:
*
*	RETURNS: None
*/
void pan(int pan)
{
	if(pan > MAX_PAN)
     558:	85 3b       	cpi	r24, 0xB5	; 181
     55a:	91 05       	cpc	r25, r1
     55c:	1c f4       	brge	.+6      	; 0x564 <pan+0xc>
		pan = MAX_PAN;
	if(pan < MIN_PAN)
     55e:	97 fd       	sbrc	r25, 7
     560:	04 c0       	rjmp	.+8      	; 0x56a <pan+0x12>
     562:	05 c0       	rjmp	.+10     	; 0x56e <pan+0x16>
*	RETURNS: None
*/
void pan(int pan)
{
	if(pan > MAX_PAN)
		pan = MAX_PAN;
     564:	84 eb       	ldi	r24, 0xB4	; 180
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	02 c0       	rjmp	.+4      	; 0x56e <pan+0x16>
	if(pan < MIN_PAN)
		pan = MIN_PAN;  
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
	PanVal = pan;
     56e:	90 93 fa 02 	sts	0x02FA, r25
     572:	80 93 f9 02 	sts	0x02F9, r24
*
*	RETURNS: int: value that OCR should be set to.
*/
int calcOCR(int degree)
{
	degree=ICR_VALUE-(CALC_OFFSET+(CALC_MULT*degree));
     576:	46 ef       	ldi	r20, 0xF6	; 246
     578:	5f ef       	ldi	r21, 0xFF	; 255
     57a:	84 9f       	mul	r24, r20
     57c:	90 01       	movw	r18, r0
     57e:	85 9f       	mul	r24, r21
     580:	30 0d       	add	r19, r0
     582:	94 9f       	mul	r25, r20
     584:	30 0d       	add	r19, r0
     586:	11 24       	eor	r1, r1
     588:	28 54       	subi	r18, 0x48	; 72
     58a:	3b 4d       	sbci	r19, 0xDB	; 219
	if(pan > MAX_PAN)
		pan = MAX_PAN;
	if(pan < MIN_PAN)
		pan = MIN_PAN;  
	PanVal = pan;
	PAN = calcOCR(PanVal);
     58c:	3b bd       	out	0x2b, r19	; 43
     58e:	2a bd       	out	0x2a, r18	; 42
	return;
}
     590:	08 95       	ret

00000592 <tilt>:
*
*	RETURNS: None
*/
void tilt(int tilt)
{
	if(tilt > MAX_TILT)
     592:	8b 38       	cpi	r24, 0x8B	; 139
     594:	91 05       	cpc	r25, r1
     596:	24 f4       	brge	.+8      	; 0x5a0 <tilt+0xe>
		tilt = MAX_TILT;
	if(tilt < MIN_TILT)
     598:	82 30       	cpi	r24, 0x02	; 2
     59a:	91 05       	cpc	r25, r1
     59c:	24 f0       	brlt	.+8      	; 0x5a6 <tilt+0x14>
     59e:	05 c0       	rjmp	.+10     	; 0x5aa <tilt+0x18>
*	RETURNS: None
*/
void tilt(int tilt)
{
	if(tilt > MAX_TILT)
		tilt = MAX_TILT;
     5a0:	8a e8       	ldi	r24, 0x8A	; 138
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <tilt+0x18>
	if(tilt < MIN_TILT)
		tilt = MIN_TILT; 
     5a6:	82 e0       	ldi	r24, 0x02	; 2
     5a8:	90 e0       	ldi	r25, 0x00	; 0
	TiltVal = tilt;
     5aa:	90 93 fc 02 	sts	0x02FC, r25
     5ae:	80 93 fb 02 	sts	0x02FB, r24
*
*	RETURNS: int: value that OCR should be set to.
*/
int calcOCR(int degree)
{
	degree=ICR_VALUE-(CALC_OFFSET+(CALC_MULT*degree));
     5b2:	46 ef       	ldi	r20, 0xF6	; 246
     5b4:	5f ef       	ldi	r21, 0xFF	; 255
     5b6:	84 9f       	mul	r24, r20
     5b8:	90 01       	movw	r18, r0
     5ba:	85 9f       	mul	r24, r21
     5bc:	30 0d       	add	r19, r0
     5be:	94 9f       	mul	r25, r20
     5c0:	30 0d       	add	r19, r0
     5c2:	11 24       	eor	r1, r1
     5c4:	28 54       	subi	r18, 0x48	; 72
     5c6:	3b 4d       	sbci	r19, 0xDB	; 219
	if(tilt > MAX_TILT)
		tilt = MAX_TILT;
	if(tilt < MIN_TILT)
		tilt = MIN_TILT; 
	TiltVal = tilt;
	TILT = calcOCR(TiltVal);
     5c8:	39 bd       	out	0x29, r19	; 41
     5ca:	28 bd       	out	0x28, r18	; 40
	return;
}
     5cc:	08 95       	ret

000005ce <getServoPan>:
*	RETURNS: int: Current xpos
*/
int getServoPan(void)
{
	return PanVal;
}
     5ce:	80 91 f9 02 	lds	r24, 0x02F9
     5d2:	90 91 fa 02 	lds	r25, 0x02FA
     5d6:	08 95       	ret

000005d8 <setServoPan>:
*
*	RETURNS: None
*/
void setServoPan(int dPan)
{
	PanVal = PanVal + dPan;
     5d8:	20 91 f9 02 	lds	r18, 0x02F9
     5dc:	30 91 fa 02 	lds	r19, 0x02FA
     5e0:	28 0f       	add	r18, r24
     5e2:	39 1f       	adc	r19, r25
     5e4:	30 93 fa 02 	sts	0x02FA, r19
     5e8:	20 93 f9 02 	sts	0x02F9, r18
	pan(PanVal);
     5ec:	c9 01       	movw	r24, r18
     5ee:	0e 94 ac 02 	call	0x558	; 0x558 <pan>
	return;
}
     5f2:	08 95       	ret

000005f4 <getServoTilt>:
*	RETURNS: int: Current ypos
*/
int getServoTilt(void)
{
	return TiltVal;
}
     5f4:	80 91 fb 02 	lds	r24, 0x02FB
     5f8:	90 91 fc 02 	lds	r25, 0x02FC
     5fc:	08 95       	ret

000005fe <setServoTilt>:
*
*	RETURNS: None
*/
void setServoTilt(int dTilt)
{
	TiltVal = TiltVal + dTilt;
     5fe:	20 91 fb 02 	lds	r18, 0x02FB
     602:	30 91 fc 02 	lds	r19, 0x02FC
     606:	28 0f       	add	r18, r24
     608:	39 1f       	adc	r19, r25
     60a:	30 93 fc 02 	sts	0x02FC, r19
     60e:	20 93 fb 02 	sts	0x02FB, r18
	tilt(TiltVal);
     612:	c9 01       	movw	r24, r18
     614:	0e 94 c9 02 	call	0x592	; 0x592 <tilt>
	return;
}
     618:	08 95       	ret

0000061a <TWIaction>:
RETURNS:	uint8_t:	Returns status of operation (TWSR)
*/
uint8_t TWIaction(uint8_t command)
{
	// Setup Control Register with command and enable TWI
	TWCR = command | (1<<TWINT) | (1<<TWEN);
     61a:	98 2f       	mov	r25, r24
     61c:	94 68       	ori	r25, 0x84	; 132
     61e:	96 bf       	out	0x36, r25	; 54
	// Command is not STOP, STOP doesn't set TWINT bit
	if(!(command == (1<<TWSTO)))
     620:	80 31       	cpi	r24, 0x10	; 16
     622:	19 f0       	breq	.+6      	; 0x62a <TWIaction+0x10>
		// Operation has not completed yet, keep spinning
		while(!(TWCR & (1<<TWINT)));
     624:	06 b6       	in	r0, 0x36	; 54
     626:	07 fe       	sbrs	r0, 7
     628:	fd cf       	rjmp	.-6      	; 0x624 <TWIaction+0xa>
	// Mask off clock divider bits from Status Reg
	return TW_STATUS;
     62a:	81 b1       	in	r24, 0x01	; 1
}
     62c:	88 7f       	andi	r24, 0xF8	; 248
     62e:	08 95       	ret

00000630 <TWIinit>:
PARAMETERS:	VOID
RETURNS:	VOID
*/
void TWIinit(void)
{
	TWBR = TWBR_VAL;
     630:	82 e1       	ldi	r24, 0x12	; 18
     632:	80 b9       	out	0x00, r24	; 0
	
	return;	
}
     634:	08 95       	ret

00000636 <TWIread>:
PURPOSE:	Read contents of registers on TWI connected device
PARAMETERS:	uint8_t regNumber:	Register to be read
RETURNS:	uint8_t:	8-bit value stored in register
*/
uint8_t TWIread(uint8_t regNumber)
{
     636:	1f 93       	push	r17
     638:	18 2f       	mov	r17, r24
	uint8_t retVal = 0;

	// Start Communications
	if(TWIaction(1<<TWSTA) != TW_START)
     63a:	80 e2       	ldi	r24, 0x20	; 32
     63c:	0e 94 0d 03 	call	0x61a	; 0x61a <TWIaction>
     640:	88 30       	cpi	r24, 0x08	; 8
     642:	21 f0       	breq	.+8      	; 0x64c <TWIread+0x16>
		printf("Error Starting Read\n");
     644:	8d ef       	ldi	r24, 0xFD	; 253
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	0e 94 2d 05 	call	0xa5a	; 0xa5a <puts>
	
	// Send Camera Write Address
	TWDR = SLA_W;
     64c:	80 ec       	ldi	r24, 0xC0	; 192
     64e:	83 b9       	out	0x03, r24	; 3
	if(TWIaction(0) != TW_MT_SLA_ACK)
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 0d 03 	call	0x61a	; 0x61a <TWIaction>
     656:	88 31       	cpi	r24, 0x18	; 24
     658:	21 f0       	breq	.+8      	; 0x662 <TWIread+0x2c>
		printf("Error Sending Camera Write Address for Read\n");
     65a:	81 e1       	ldi	r24, 0x11	; 17
     65c:	93 e0       	ldi	r25, 0x03	; 3
     65e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <puts>
	
	// Send Desired Reg Address
	TWDR = regNumber;
     662:	13 b9       	out	0x03, r17	; 3
	if(TWIaction(0) != TW_MT_DATA_ACK)
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	0e 94 0d 03 	call	0x61a	; 0x61a <TWIaction>
     66a:	88 32       	cpi	r24, 0x28	; 40
     66c:	21 f0       	breq	.+8      	; 0x676 <TWIread+0x40>
		printf("Error Sending Camera Reg Address for Read\n");
     66e:	8d e3       	ldi	r24, 0x3D	; 61
     670:	93 e0       	ldi	r25, 0x03	; 3
     672:	0e 94 2d 05 	call	0xa5a	; 0xa5a <puts>
		
	// Send a stop
	TWIaction(1<<TWSTO);
     676:	80 e1       	ldi	r24, 0x10	; 16
     678:	0e 94 0d 03 	call	0x61a	; 0x61a <TWIaction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     67c:	85 e3       	ldi	r24, 0x35	; 53
     67e:	8a 95       	dec	r24
     680:	f1 f7       	brne	.-4      	; 0x67e <TWIread+0x48>
     682:	00 00       	nop
	// Let the stop take effect
	_delay_us(10);

	// Send START
	if(TWIaction(1<<TWSTA) != TW_START)
     684:	80 e2       	ldi	r24, 0x20	; 32
     686:	0e 94 0d 03 	call	0x61a	; 0x61a <TWIaction>
     68a:	88 30       	cpi	r24, 0x08	; 8
     68c:	21 f0       	breq	.+8      	; 0x696 <TWIread+0x60>
		printf("Error Sending Repeated Start\n");
     68e:	87 e6       	ldi	r24, 0x67	; 103
     690:	93 e0       	ldi	r25, 0x03	; 3
     692:	0e 94 2d 05 	call	0xa5a	; 0xa5a <puts>

	// Send Camera Read Address
	TWDR = SLA_R;
     696:	81 ec       	ldi	r24, 0xC1	; 193
     698:	83 b9       	out	0x03, r24	; 3
	if(TWIaction(0) != TW_MR_SLA_ACK)
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	0e 94 0d 03 	call	0x61a	; 0x61a <TWIaction>
     6a0:	80 34       	cpi	r24, 0x40	; 64
     6a2:	21 f0       	breq	.+8      	; 0x6ac <TWIread+0x76>
		printf("Error Getting Camera Read ACK\n");
     6a4:	84 e8       	ldi	r24, 0x84	; 132
     6a6:	93 e0       	ldi	r25, 0x03	; 3
     6a8:	0e 94 2d 05 	call	0xa5a	; 0xa5a <puts>

	// Ask for Data
	if(TWIaction(0) != TW_MR_DATA_NACK)
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	0e 94 0d 03 	call	0x61a	; 0x61a <TWIaction>
     6b2:	88 35       	cpi	r24, 0x58	; 88
     6b4:	21 f0       	breq	.+8      	; 0x6be <TWIread+0x88>
		printf("Error Reading From Camera Register\n");
     6b6:	82 ea       	ldi	r24, 0xA2	; 162
     6b8:	93 e0       	ldi	r25, 0x03	; 3
     6ba:	0e 94 2d 05 	call	0xa5a	; 0xa5a <puts>

	// Read data from TWDR to return value
	retVal = TWDR;
     6be:	13 b1       	in	r17, 0x03	; 3

	// Stop Communications
	TWIaction(1<<TWSTO);
     6c0:	80 e1       	ldi	r24, 0x10	; 16
     6c2:	0e 94 0d 03 	call	0x61a	; 0x61a <TWIaction>

	// Return retVal
	return retVal;	
}
     6c6:	81 2f       	mov	r24, r17
     6c8:	1f 91       	pop	r17
     6ca:	08 95       	ret

000006cc <TWIwrite>:
PARAMETERS:	uint8_t regNumber:	Register to write to
			uint8_t value:		Value to write
RETURNS:	VOID
*/
void TWIwrite(uint8_t regNumber, uint8_t value)
{
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	18 2f       	mov	r17, r24
     6d2:	06 2f       	mov	r16, r22
	// Start Communications
	if(TWIaction(1<<TWSTA) != TW_START)
     6d4:	80 e2       	ldi	r24, 0x20	; 32
     6d6:	0e 94 0d 03 	call	0x61a	; 0x61a <TWIaction>
     6da:	88 30       	cpi	r24, 0x08	; 8
     6dc:	21 f0       	breq	.+8      	; 0x6e6 <TWIwrite+0x1a>
		printf("Error Starting Write\n");
     6de:	85 ec       	ldi	r24, 0xC5	; 197
     6e0:	93 e0       	ldi	r25, 0x03	; 3
     6e2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <puts>
	
	// Send Camera Write Address
	TWDR = SLA_W;
     6e6:	80 ec       	ldi	r24, 0xC0	; 192
     6e8:	83 b9       	out	0x03, r24	; 3
	if(TWIaction(0) != TW_MT_SLA_ACK)
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 0d 03 	call	0x61a	; 0x61a <TWIaction>
     6f0:	88 31       	cpi	r24, 0x18	; 24
     6f2:	a1 f0       	breq	.+40     	; 0x71c <TWIwrite+0x50>
		printf("Error Sending Camera Write Address for Write 0x%X\n",TW_STATUS);
     6f4:	21 b1       	in	r18, 0x01	; 1
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <TWIwrite+0x2c>
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <TWIwrite+0x2e>
     6fa:	4a ed       	ldi	r20, 0xDA	; 218
     6fc:	53 e0       	ldi	r21, 0x03	; 3
     6fe:	ed b7       	in	r30, 0x3d	; 61
     700:	fe b7       	in	r31, 0x3e	; 62
     702:	52 83       	std	Z+2, r21	; 0x02
     704:	41 83       	std	Z+1, r20	; 0x01
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	28 7f       	andi	r18, 0xF8	; 248
     70a:	30 70       	andi	r19, 0x00	; 0
     70c:	34 83       	std	Z+4, r19	; 0x04
     70e:	23 83       	std	Z+3, r18	; 0x03
     710:	0e 94 11 05 	call	0xa22	; 0xa22 <printf>
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
	
	// Send Register Address
	TWDR = regNumber;	
     71c:	13 b9       	out	0x03, r17	; 3
	if(TWIaction(0) != TW_MT_DATA_ACK)
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	0e 94 0d 03 	call	0x61a	; 0x61a <TWIaction>
     724:	88 32       	cpi	r24, 0x28	; 40
     726:	a1 f0       	breq	.+40     	; 0x750 <TWIwrite+0x84>
		printf("Error Sending Register to Camera 0x%X\n",TW_STATUS);
     728:	81 b1       	in	r24, 0x01	; 1
     72a:	00 d0       	rcall	.+0      	; 0x72c <TWIwrite+0x60>
     72c:	00 d0       	rcall	.+0      	; 0x72e <TWIwrite+0x62>
     72e:	2d e0       	ldi	r18, 0x0D	; 13
     730:	34 e0       	ldi	r19, 0x04	; 4
     732:	ed b7       	in	r30, 0x3d	; 61
     734:	fe b7       	in	r31, 0x3e	; 62
     736:	32 83       	std	Z+2, r19	; 0x02
     738:	21 83       	std	Z+1, r18	; 0x01
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	88 7f       	andi	r24, 0xF8	; 248
     73e:	90 70       	andi	r25, 0x00	; 0
     740:	94 83       	std	Z+4, r25	; 0x04
     742:	83 83       	std	Z+3, r24	; 0x03
     744:	0e 94 11 05 	call	0xa22	; 0xa22 <printf>
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
	
	// Send Data
	TWDR = value;
     750:	03 b9       	out	0x03, r16	; 3
	if(TWIaction(0) != TW_MT_DATA_ACK)
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 0d 03 	call	0x61a	; 0x61a <TWIaction>
     758:	88 32       	cpi	r24, 0x28	; 40
     75a:	21 f0       	breq	.+8      	; 0x764 <TWIwrite+0x98>
		printf("Error Sending Data to Camera\n");
     75c:	84 e3       	ldi	r24, 0x34	; 52
     75e:	94 e0       	ldi	r25, 0x04	; 4
     760:	0e 94 2d 05 	call	0xa5a	; 0xa5a <puts>

	// Stop Communications
	TWIaction(1<<TWSTO);
     764:	80 e1       	ldi	r24, 0x10	; 16
     766:	0e 94 0d 03 	call	0x61a	; 0x61a <TWIaction>
}
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	08 95       	ret

00000770 <uart_putc>:
*						serial connection
*
*	RETURN: None
*/
void uart_putc(char c)
{
     770:	01 c0       	rjmp	.+2      	; 0x774 <uart_putc+0x4>
	UDR = c;

	// if the char is a newline, also send return
	if(c == '\n')
	{
		uart_putc('\r');
     772:	8d e0       	ldi	r24, 0x0D	; 13
*	RETURN: None
*/
void uart_putc(char c)
{
	// wait here until the UDR is empty
	while(!(UCSRA&(1<<UDRE)));
     774:	5d 9b       	sbis	0x0b, 5	; 11
     776:	fe cf       	rjmp	.-4      	; 0x774 <uart_putc+0x4>

	// add the char to the UDR
	UDR = c;
     778:	8c b9       	out	0x0c, r24	; 12

	// if the char is a newline, also send return
	if(c == '\n')
     77a:	8a 30       	cpi	r24, 0x0A	; 10
     77c:	d1 f3       	breq	.-12     	; 0x772 <uart_putc+0x2>
	{
		uart_putc('\r');
	}
	return;
}
     77e:	08 95       	ret

00000780 <uart_getc>:
*/
char uart_getc(void)
{
	char c;
	// Start of new line?
	if(rxptr == 0)
     780:	80 91 d9 04 	lds	r24, 0x04D9
     784:	90 91 da 04 	lds	r25, 0x04DA
     788:	00 97       	sbiw	r24, 0x00	; 0
     78a:	09 f0       	breq	.+2      	; 0x78e <uart_getc+0xe>
     78c:	5d c0       	rjmp	.+186    	; 0x848 <uart_getc+0xc8>
	{
		// Write buffer = start of buffer
		for(cptr = RX_BUFF;;)
     78e:	87 ea       	ldi	r24, 0xA7	; 167
     790:	94 e0       	ldi	r25, 0x04	; 4
     792:	90 93 dc 04 	sts	0x04DC, r25
     796:	80 93 db 04 	sts	0x04DB, r24
		{
			// poll for new character
			while(!(UCSRA&(1<<RXC)));
     79a:	5f 9b       	sbis	0x0b, 7	; 11
     79c:	fe cf       	rjmp	.-4      	; 0x79a <uart_getc+0x1a>
			c = UDR;
     79e:	8c b1       	in	r24, 0x0c	; 12
			// if the char is a return, replace with newline,
			// increment the pointer, send the newline, reset
			// the read pointer and break the loop
			if(c=='\r')
     7a0:	8d 30       	cpi	r24, 0x0D	; 13
     7a2:	c9 f4       	brne	.+50     	; 0x7d6 <uart_getc+0x56>
			{
				c = '\n';
				*cptr = c;
     7a4:	e0 91 db 04 	lds	r30, 0x04DB
     7a8:	f0 91 dc 04 	lds	r31, 0x04DC
     7ac:	8a e0       	ldi	r24, 0x0A	; 10
     7ae:	80 83       	st	Z, r24
				cptr++;
     7b0:	80 91 db 04 	lds	r24, 0x04DB
     7b4:	90 91 dc 04 	lds	r25, 0x04DC
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	90 93 dc 04 	sts	0x04DC, r25
     7be:	80 93 db 04 	sts	0x04DB, r24

				uart_putc(c);
     7c2:	8a e0       	ldi	r24, 0x0A	; 10
     7c4:	0e 94 b8 03 	call	0x770	; 0x770 <uart_putc>
				rxptr = RX_BUFF;
     7c8:	87 ea       	ldi	r24, 0xA7	; 167
     7ca:	94 e0       	ldi	r25, 0x04	; 4
     7cc:	90 93 da 04 	sts	0x04DA, r25
     7d0:	80 93 d9 04 	sts	0x04D9, r24
				break;
     7d4:	39 c0       	rjmp	.+114    	; 0x848 <uart_getc+0xc8>
			}
			// if char is printable
			if((c >= ' ') && (c < 0x7F))
     7d6:	98 2f       	mov	r25, r24
     7d8:	90 52       	subi	r25, 0x20	; 32
     7da:	9f 35       	cpi	r25, 0x5F	; 95
     7dc:	c0 f4       	brcc	.+48     	; 0x80e <uart_getc+0x8e>
			{
				// if the buffer is full, send a beep to the terminal
				if(cptr == RX_BUFF + MAX_BUFFER_SIZE - 2)
     7de:	e0 91 db 04 	lds	r30, 0x04DB
     7e2:	f0 91 dc 04 	lds	r31, 0x04DC
     7e6:	24 e0       	ldi	r18, 0x04	; 4
     7e8:	e7 3d       	cpi	r30, 0xD7	; 215
     7ea:	f2 07       	cpc	r31, r18
     7ec:	11 f4       	brne	.+4      	; 0x7f2 <uart_getc+0x72>
				{
					uart_putc('\a'); // beep
     7ee:	87 e0       	ldi	r24, 0x07	; 7
     7f0:	0b c0       	rjmp	.+22     	; 0x808 <uart_getc+0x88>
				}
				// otherwise set the char, increment the pointer, and send it
				else
				{
					*cptr = c;
     7f2:	80 83       	st	Z, r24
					cptr++;
     7f4:	20 91 db 04 	lds	r18, 0x04DB
     7f8:	30 91 dc 04 	lds	r19, 0x04DC
     7fc:	2f 5f       	subi	r18, 0xFF	; 255
     7fe:	3f 4f       	sbci	r19, 0xFF	; 255
     800:	30 93 dc 04 	sts	0x04DC, r19
     804:	20 93 db 04 	sts	0x04DB, r18
					uart_putc(c);
     808:	0e 94 b8 03 	call	0x770	; 0x770 <uart_putc>
     80c:	c6 cf       	rjmp	.-116    	; 0x79a <uart_getc+0x1a>
				}

			}
			// if backspace or delete
			if((c == 0x08) || (c == 0x7F))
     80e:	88 30       	cpi	r24, 0x08	; 8
     810:	11 f0       	breq	.+4      	; 0x816 <uart_getc+0x96>
     812:	8f 37       	cpi	r24, 0x7F	; 127
     814:	11 f6       	brne	.-124    	; 0x79a <uart_getc+0x1a>
			{
				// if the write pointer is not at the start of the buffer
				if(cptr > RX_BUFF)
     816:	80 91 db 04 	lds	r24, 0x04DB
     81a:	90 91 dc 04 	lds	r25, 0x04DC
     81e:	24 e0       	ldi	r18, 0x04	; 4
     820:	87 3a       	cpi	r24, 0xA7	; 167
     822:	92 07       	cpc	r25, r18
     824:	09 f0       	breq	.+2      	; 0x828 <uart_getc+0xa8>
     826:	08 f4       	brcc	.+2      	; 0x82a <uart_getc+0xaa>
     828:	b8 cf       	rjmp	.-144    	; 0x79a <uart_getc+0x1a>
				{
					uart_putc(0x08); // send backspace
     82a:	88 e0       	ldi	r24, 0x08	; 8
     82c:	0e 94 b8 03 	call	0x770	; 0x770 <uart_putc>
					uart_putc(' ');  // send space to overwrite previous char
     830:	80 e2       	ldi	r24, 0x20	; 32
     832:	0e 94 b8 03 	call	0x770	; 0x770 <uart_putc>
					uart_putc(0x08); // send backspace
     836:	88 e0       	ldi	r24, 0x08	; 8
     838:	0e 94 b8 03 	call	0x770	; 0x770 <uart_putc>
					cptr--; // decrement the buffer write pointer
     83c:	80 91 db 04 	lds	r24, 0x04DB
     840:	90 91 dc 04 	lds	r25, 0x04DC
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	a5 cf       	rjmp	.-182    	; 0x792 <uart_getc+0x12>
				}
			}
		}
	}
	// get the character
	c = *rxptr;
     848:	e0 91 d9 04 	lds	r30, 0x04D9
     84c:	f0 91 da 04 	lds	r31, 0x04DA
     850:	81 91       	ld	r24, Z+
	// increment the read pointer
	rxptr++;
     852:	f0 93 da 04 	sts	0x04DA, r31
     856:	e0 93 d9 04 	sts	0x04D9, r30
	// if the char was a newline, reset the read pointer to 0
	if(c == '\n')
     85a:	8a 30       	cpi	r24, 0x0A	; 10
     85c:	21 f4       	brne	.+8      	; 0x866 <__stack+0x7>
	{
		rxptr = 0;
     85e:	10 92 da 04 	sts	0x04DA, r1
     862:	10 92 d9 04 	sts	0x04D9, r1
	}
	// return the char
	return c;
}
     866:	08 95       	ret

00000868 <uart_init>:
*	RETURNS: None
*/
void uart_init()
{
	// Set BAUD Rate
	UBRRL = UBRRL_VALUE;
     868:	83 e3       	ldi	r24, 0x33	; 51
     86a:	89 b9       	out	0x09, r24	; 9
	
	UCSRA = 0;
     86c:	1b b8       	out	0x0b, r1	; 11
	
	// Transmit and Receive
	UCSRB = (1<<TXEN)|(1<<RXEN);
     86e:	88 e1       	ldi	r24, 0x18	; 24
     870:	8a b9       	out	0x0a, r24	; 10
	
	// synchronous operation, 8-bit char size
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
     872:	86 e8       	ldi	r24, 0x86	; 134
     874:	80 bd       	out	0x20, r24	; 32

	// initialize pointers to 0
	rxptr = 0;
     876:	10 92 da 04 	sts	0x04DA, r1
     87a:	10 92 d9 04 	sts	0x04D9, r1
	cptr = 0;
     87e:	10 92 dc 04 	sts	0x04DC, r1
     882:	10 92 db 04 	sts	0x04DB, r1

	// Finish up C IO integration
	stdout=stdin=&uart_str;
     886:	88 e9       	ldi	r24, 0x98	; 152
     888:	94 e0       	ldi	r25, 0x04	; 4
     88a:	90 93 de 04 	sts	0x04DE, r25
     88e:	80 93 dd 04 	sts	0x04DD, r24
     892:	90 93 e0 04 	sts	0x04E0, r25
     896:	80 93 df 04 	sts	0x04DF, r24

	return;
}
     89a:	08 95       	ret

0000089c <readIO>:
*						collect data from
*
*	RETURNS:	Data at given regAddress
*/
uint8_t readIO(uint16_t regAddress)
{
     89c:	1f 93       	push	r17
	uint8_t regData = *(volatile uint8_t*) regAddress;
     89e:	fc 01       	movw	r30, r24
     8a0:	10 81       	ld	r17, Z
	printf("Register %u contains %u\n\n", regAddress, regData);
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <readIO+0x8>
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <readIO+0xa>
     8a6:	00 d0       	rcall	.+0      	; 0x8a8 <readIO+0xc>
     8a8:	ed b7       	in	r30, 0x3d	; 61
     8aa:	fe b7       	in	r31, 0x3e	; 62
     8ac:	31 96       	adiw	r30, 0x01	; 1
     8ae:	21 e5       	ldi	r18, 0x51	; 81
     8b0:	34 e0       	ldi	r19, 0x04	; 4
     8b2:	ad b7       	in	r26, 0x3d	; 61
     8b4:	be b7       	in	r27, 0x3e	; 62
     8b6:	12 96       	adiw	r26, 0x02	; 2
     8b8:	3c 93       	st	X, r19
     8ba:	2e 93       	st	-X, r18
     8bc:	11 97       	sbiw	r26, 0x01	; 1
     8be:	82 83       	std	Z+2, r24	; 0x02
     8c0:	93 83       	std	Z+3, r25	; 0x03
     8c2:	14 83       	std	Z+4, r17	; 0x04
     8c4:	15 82       	std	Z+5, r1	; 0x05
     8c6:	0e 94 11 05 	call	0xa22	; 0xa22 <printf>
     8ca:	8d b7       	in	r24, 0x3d	; 61
     8cc:	9e b7       	in	r25, 0x3e	; 62
     8ce:	06 96       	adiw	r24, 0x06	; 6
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	9e bf       	out	0x3e, r25	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	8d bf       	out	0x3d, r24	; 61
	return regData;
}
     8da:	81 2f       	mov	r24, r17
     8dc:	1f 91       	pop	r17
     8de:	08 95       	ret

000008e0 <writeIO>:
*/
void writeIO(uint16_t regAddress,uint8_t data)
{
	if(data <= 0xFF)
	{
		volatile uint8_t* regData = (uint8_t*) regAddress;
     8e0:	fc 01       	movw	r30, r24
		*regData = data;
     8e2:	60 83       	st	Z, r22
		if(*regData == data)
     8e4:	20 81       	ld	r18, Z
     8e6:	26 17       	cp	r18, r22
     8e8:	f1 f4       	brne	.+60     	; 0x926 <writeIO+0x46>
		{
			printf("Value %u now resides in %u\n", *regData, regAddress);
     8ea:	40 81       	ld	r20, Z
     8ec:	00 d0       	rcall	.+0      	; 0x8ee <writeIO+0xe>
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <writeIO+0x10>
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <writeIO+0x12>
     8f2:	ed b7       	in	r30, 0x3d	; 61
     8f4:	fe b7       	in	r31, 0x3e	; 62
     8f6:	31 96       	adiw	r30, 0x01	; 1
     8f8:	2b e6       	ldi	r18, 0x6B	; 107
     8fa:	34 e0       	ldi	r19, 0x04	; 4
     8fc:	ad b7       	in	r26, 0x3d	; 61
     8fe:	be b7       	in	r27, 0x3e	; 62
     900:	12 96       	adiw	r26, 0x02	; 2
     902:	3c 93       	st	X, r19
     904:	2e 93       	st	-X, r18
     906:	11 97       	sbiw	r26, 0x01	; 1
     908:	42 83       	std	Z+2, r20	; 0x02
     90a:	13 82       	std	Z+3, r1	; 0x03
     90c:	84 83       	std	Z+4, r24	; 0x04
     90e:	95 83       	std	Z+5, r25	; 0x05
     910:	0e 94 11 05 	call	0xa22	; 0xa22 <printf>
     914:	ed b7       	in	r30, 0x3d	; 61
     916:	fe b7       	in	r31, 0x3e	; 62
     918:	36 96       	adiw	r30, 0x06	; 6
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	fe bf       	out	0x3e, r31	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	ed bf       	out	0x3d, r30	; 61
     924:	0d c0       	rjmp	.+26     	; 0x940 <writeIO+0x60>
		}
		else
		{
			printf("Something Failed");
     926:	00 d0       	rcall	.+0      	; 0x928 <writeIO+0x48>
     928:	87 e8       	ldi	r24, 0x87	; 135
     92a:	94 e0       	ldi	r25, 0x04	; 4
     92c:	ad b7       	in	r26, 0x3d	; 61
     92e:	be b7       	in	r27, 0x3e	; 62
     930:	12 96       	adiw	r26, 0x02	; 2
     932:	9c 93       	st	X, r25
     934:	8e 93       	st	-X, r24
     936:	11 97       	sbiw	r26, 0x01	; 1
     938:	0e 94 11 05 	call	0xa22	; 0xa22 <printf>
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
	}
	else
	{
		printf("How Big Do You Think My Data Capacity Is? Enter A Smaller Number For Data.");
	}
	printf("\n");
     940:	8a e0       	ldi	r24, 0x0A	; 10
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 26 05 	call	0xa4c	; 0xa4c <putchar>
	return;
}
     948:	08 95       	ret

0000094a <__divmodhi4>:
     94a:	97 fb       	bst	r25, 7
     94c:	09 2e       	mov	r0, r25
     94e:	07 26       	eor	r0, r23
     950:	0a d0       	rcall	.+20     	; 0x966 <__divmodhi4_neg1>
     952:	77 fd       	sbrc	r23, 7
     954:	04 d0       	rcall	.+8      	; 0x95e <__divmodhi4_neg2>
     956:	0c d0       	rcall	.+24     	; 0x970 <__udivmodhi4>
     958:	06 d0       	rcall	.+12     	; 0x966 <__divmodhi4_neg1>
     95a:	00 20       	and	r0, r0
     95c:	1a f4       	brpl	.+6      	; 0x964 <__divmodhi4_exit>

0000095e <__divmodhi4_neg2>:
     95e:	70 95       	com	r23
     960:	61 95       	neg	r22
     962:	7f 4f       	sbci	r23, 0xFF	; 255

00000964 <__divmodhi4_exit>:
     964:	08 95       	ret

00000966 <__divmodhi4_neg1>:
     966:	f6 f7       	brtc	.-4      	; 0x964 <__divmodhi4_exit>
     968:	90 95       	com	r25
     96a:	81 95       	neg	r24
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	08 95       	ret

00000970 <__udivmodhi4>:
     970:	aa 1b       	sub	r26, r26
     972:	bb 1b       	sub	r27, r27
     974:	51 e1       	ldi	r21, 0x11	; 17
     976:	07 c0       	rjmp	.+14     	; 0x986 <__udivmodhi4_ep>

00000978 <__udivmodhi4_loop>:
     978:	aa 1f       	adc	r26, r26
     97a:	bb 1f       	adc	r27, r27
     97c:	a6 17       	cp	r26, r22
     97e:	b7 07       	cpc	r27, r23
     980:	10 f0       	brcs	.+4      	; 0x986 <__udivmodhi4_ep>
     982:	a6 1b       	sub	r26, r22
     984:	b7 0b       	sbc	r27, r23

00000986 <__udivmodhi4_ep>:
     986:	88 1f       	adc	r24, r24
     988:	99 1f       	adc	r25, r25
     98a:	5a 95       	dec	r21
     98c:	a9 f7       	brne	.-22     	; 0x978 <__udivmodhi4_loop>
     98e:	80 95       	com	r24
     990:	90 95       	com	r25
     992:	bc 01       	movw	r22, r24
     994:	cd 01       	movw	r24, r26
     996:	08 95       	ret

00000998 <toupper>:
     998:	91 11       	cpse	r25, r1
     99a:	08 95       	ret
     99c:	81 56       	subi	r24, 0x61	; 97
     99e:	8a 51       	subi	r24, 0x1A	; 26
     9a0:	08 f4       	brcc	.+2      	; 0x9a4 <toupper+0xc>
     9a2:	80 52       	subi	r24, 0x20	; 32
     9a4:	85 58       	subi	r24, 0x85	; 133
     9a6:	08 95       	ret

000009a8 <strcmp>:
     9a8:	fb 01       	movw	r30, r22
     9aa:	dc 01       	movw	r26, r24
     9ac:	8d 91       	ld	r24, X+
     9ae:	01 90       	ld	r0, Z+
     9b0:	80 19       	sub	r24, r0
     9b2:	01 10       	cpse	r0, r1
     9b4:	d9 f3       	breq	.-10     	; 0x9ac <strcmp+0x4>
     9b6:	99 0b       	sbc	r25, r25
     9b8:	08 95       	ret

000009ba <fgets>:
     9ba:	a0 e0       	ldi	r26, 0x00	; 0
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	e3 ee       	ldi	r30, 0xE3	; 227
     9c0:	f4 e0       	ldi	r31, 0x04	; 4
     9c2:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__prologue_saves__+0x14>
     9c6:	ec 01       	movw	r28, r24
     9c8:	6a 01       	movw	r12, r20
     9ca:	fa 01       	movw	r30, r20
     9cc:	83 81       	ldd	r24, Z+3	; 0x03
     9ce:	80 ff       	sbrs	r24, 0
     9d0:	1f c0       	rjmp	.+62     	; 0xa10 <fgets+0x56>
     9d2:	16 16       	cp	r1, r22
     9d4:	17 06       	cpc	r1, r23
     9d6:	e4 f4       	brge	.+56     	; 0xa10 <fgets+0x56>
     9d8:	7b 01       	movw	r14, r22
     9da:	08 94       	sec
     9dc:	e1 08       	sbc	r14, r1
     9de:	f1 08       	sbc	r15, r1
     9e0:	8e 01       	movw	r16, r28
     9e2:	10 c0       	rjmp	.+32     	; 0xa04 <fgets+0x4a>
     9e4:	c6 01       	movw	r24, r12
     9e6:	0e 94 48 0a 	call	0x1490	; 0x1490 <fgetc>
     9ea:	ff ef       	ldi	r31, 0xFF	; 255
     9ec:	8f 3f       	cpi	r24, 0xFF	; 255
     9ee:	9f 07       	cpc	r25, r31
     9f0:	79 f0       	breq	.+30     	; 0xa10 <fgets+0x56>
     9f2:	f8 01       	movw	r30, r16
     9f4:	81 93       	st	Z+, r24
     9f6:	8f 01       	movw	r16, r30
     9f8:	8a 30       	cpi	r24, 0x0A	; 10
     9fa:	91 05       	cpc	r25, r1
     9fc:	31 f0       	breq	.+12     	; 0xa0a <fgets+0x50>
     9fe:	08 94       	sec
     a00:	e1 08       	sbc	r14, r1
     a02:	f1 08       	sbc	r15, r1
     a04:	e1 14       	cp	r14, r1
     a06:	f1 04       	cpc	r15, r1
     a08:	69 f7       	brne	.-38     	; 0x9e4 <fgets+0x2a>
     a0a:	f8 01       	movw	r30, r16
     a0c:	10 82       	st	Z, r1
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <fgets+0x5a>
     a10:	c0 e0       	ldi	r28, 0x00	; 0
     a12:	d0 e0       	ldi	r29, 0x00	; 0
     a14:	7e 01       	movw	r14, r28
     a16:	ce 01       	movw	r24, r28
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
     a1c:	e8 e0       	ldi	r30, 0x08	; 8
     a1e:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__epilogue_restores__+0x14>

00000a22 <printf>:
     a22:	a0 e0       	ldi	r26, 0x00	; 0
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__prologue_saves__+0x20>
     a2e:	fe 01       	movw	r30, r28
     a30:	35 96       	adiw	r30, 0x05	; 5
     a32:	61 91       	ld	r22, Z+
     a34:	71 91       	ld	r23, Z+
     a36:	80 91 df 04 	lds	r24, 0x04DF
     a3a:	90 91 e0 04 	lds	r25, 0x04E0
     a3e:	af 01       	movw	r20, r30
     a40:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vfprintf>
     a44:	20 96       	adiw	r28, 0x00	; 0
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__epilogue_restores__+0x20>

00000a4c <putchar>:
     a4c:	60 91 df 04 	lds	r22, 0x04DF
     a50:	70 91 e0 04 	lds	r23, 0x04E0
     a54:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
     a58:	08 95       	ret

00000a5a <puts>:
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	8c 01       	movw	r16, r24
     a68:	e0 91 df 04 	lds	r30, 0x04DF
     a6c:	f0 91 e0 04 	lds	r31, 0x04E0
     a70:	83 81       	ldd	r24, Z+3	; 0x03
     a72:	81 ff       	sbrs	r24, 1
     a74:	1f c0       	rjmp	.+62     	; 0xab4 <puts+0x5a>
     a76:	c0 e0       	ldi	r28, 0x00	; 0
     a78:	d0 e0       	ldi	r29, 0x00	; 0
     a7a:	0a c0       	rjmp	.+20     	; 0xa90 <puts+0x36>
     a7c:	db 01       	movw	r26, r22
     a7e:	18 96       	adiw	r26, 0x08	; 8
     a80:	ed 91       	ld	r30, X+
     a82:	fc 91       	ld	r31, X
     a84:	19 97       	sbiw	r26, 0x09	; 9
     a86:	09 95       	icall
     a88:	00 97       	sbiw	r24, 0x00	; 0
     a8a:	11 f0       	breq	.+4      	; 0xa90 <puts+0x36>
     a8c:	cf ef       	ldi	r28, 0xFF	; 255
     a8e:	df ef       	ldi	r29, 0xFF	; 255
     a90:	f8 01       	movw	r30, r16
     a92:	81 91       	ld	r24, Z+
     a94:	8f 01       	movw	r16, r30
     a96:	60 91 df 04 	lds	r22, 0x04DF
     a9a:	70 91 e0 04 	lds	r23, 0x04E0
     a9e:	88 23       	and	r24, r24
     aa0:	69 f7       	brne	.-38     	; 0xa7c <puts+0x22>
     aa2:	db 01       	movw	r26, r22
     aa4:	18 96       	adiw	r26, 0x08	; 8
     aa6:	ed 91       	ld	r30, X+
     aa8:	fc 91       	ld	r31, X
     aaa:	19 97       	sbiw	r26, 0x09	; 9
     aac:	8a e0       	ldi	r24, 0x0A	; 10
     aae:	09 95       	icall
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	11 f0       	breq	.+4      	; 0xab8 <puts+0x5e>
     ab4:	cf ef       	ldi	r28, 0xFF	; 255
     ab6:	df ef       	ldi	r29, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	e6 e0       	ldi	r30, 0x06	; 6
     ac0:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__epilogue_restores__+0x18>

00000ac4 <sscanf>:
     ac4:	ae e0       	ldi	r26, 0x0E	; 14
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	e8 e6       	ldi	r30, 0x68	; 104
     aca:	f5 e0       	ldi	r31, 0x05	; 5
     acc:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__prologue_saves__+0x20>
     ad0:	85 e0       	ldi	r24, 0x05	; 5
     ad2:	8c 83       	std	Y+4, r24	; 0x04
     ad4:	8b 89       	ldd	r24, Y+19	; 0x13
     ad6:	9c 89       	ldd	r25, Y+20	; 0x14
     ad8:	9a 83       	std	Y+2, r25	; 0x02
     ada:	89 83       	std	Y+1, r24	; 0x01
     adc:	9e 01       	movw	r18, r28
     ade:	29 5e       	subi	r18, 0xE9	; 233
     ae0:	3f 4f       	sbci	r19, 0xFF	; 255
     ae2:	ce 01       	movw	r24, r28
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	6d 89       	ldd	r22, Y+21	; 0x15
     ae8:	7e 89       	ldd	r23, Y+22	; 0x16
     aea:	a9 01       	movw	r20, r18
     aec:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <vfscanf>
     af0:	2e 96       	adiw	r28, 0x0e	; 14
     af2:	e2 e0       	ldi	r30, 0x02	; 2
     af4:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <__epilogue_restores__+0x20>

00000af8 <vfprintf>:
     af8:	ac e0       	ldi	r26, 0x0C	; 12
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	e2 e8       	ldi	r30, 0x82	; 130
     afe:	f5 e0       	ldi	r31, 0x05	; 5
     b00:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__prologue_saves__>
     b04:	6c 01       	movw	r12, r24
     b06:	1b 01       	movw	r2, r22
     b08:	8a 01       	movw	r16, r20
     b0a:	fc 01       	movw	r30, r24
     b0c:	17 82       	std	Z+7, r1	; 0x07
     b0e:	16 82       	std	Z+6, r1	; 0x06
     b10:	83 81       	ldd	r24, Z+3	; 0x03
     b12:	81 ff       	sbrs	r24, 1
     b14:	d1 c1       	rjmp	.+930    	; 0xeb8 <vfprintf+0x3c0>
     b16:	2e 01       	movw	r4, r28
     b18:	08 94       	sec
     b1a:	41 1c       	adc	r4, r1
     b1c:	51 1c       	adc	r5, r1
     b1e:	f6 01       	movw	r30, r12
     b20:	93 81       	ldd	r25, Z+3	; 0x03
     b22:	f1 01       	movw	r30, r2
     b24:	93 fd       	sbrc	r25, 3
     b26:	85 91       	lpm	r24, Z+
     b28:	93 ff       	sbrs	r25, 3
     b2a:	81 91       	ld	r24, Z+
     b2c:	1f 01       	movw	r2, r30
     b2e:	88 23       	and	r24, r24
     b30:	09 f4       	brne	.+2      	; 0xb34 <vfprintf+0x3c>
     b32:	be c1       	rjmp	.+892    	; 0xeb0 <vfprintf+0x3b8>
     b34:	85 32       	cpi	r24, 0x25	; 37
     b36:	39 f4       	brne	.+14     	; 0xb46 <vfprintf+0x4e>
     b38:	93 fd       	sbrc	r25, 3
     b3a:	85 91       	lpm	r24, Z+
     b3c:	93 ff       	sbrs	r25, 3
     b3e:	81 91       	ld	r24, Z+
     b40:	1f 01       	movw	r2, r30
     b42:	85 32       	cpi	r24, 0x25	; 37
     b44:	29 f4       	brne	.+10     	; 0xb50 <vfprintf+0x58>
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	b6 01       	movw	r22, r12
     b4a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
     b4e:	e7 cf       	rjmp	.-50     	; 0xb1e <vfprintf+0x26>
     b50:	ee 24       	eor	r14, r14
     b52:	ff 24       	eor	r15, r15
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	20 32       	cpi	r18, 0x20	; 32
     b58:	b0 f4       	brcc	.+44     	; 0xb86 <vfprintf+0x8e>
     b5a:	8b 32       	cpi	r24, 0x2B	; 43
     b5c:	69 f0       	breq	.+26     	; 0xb78 <vfprintf+0x80>
     b5e:	8c 32       	cpi	r24, 0x2C	; 44
     b60:	28 f4       	brcc	.+10     	; 0xb6c <vfprintf+0x74>
     b62:	80 32       	cpi	r24, 0x20	; 32
     b64:	51 f0       	breq	.+20     	; 0xb7a <vfprintf+0x82>
     b66:	83 32       	cpi	r24, 0x23	; 35
     b68:	71 f4       	brne	.+28     	; 0xb86 <vfprintf+0x8e>
     b6a:	0b c0       	rjmp	.+22     	; 0xb82 <vfprintf+0x8a>
     b6c:	8d 32       	cpi	r24, 0x2D	; 45
     b6e:	39 f0       	breq	.+14     	; 0xb7e <vfprintf+0x86>
     b70:	80 33       	cpi	r24, 0x30	; 48
     b72:	49 f4       	brne	.+18     	; 0xb86 <vfprintf+0x8e>
     b74:	21 60       	ori	r18, 0x01	; 1
     b76:	2c c0       	rjmp	.+88     	; 0xbd0 <vfprintf+0xd8>
     b78:	22 60       	ori	r18, 0x02	; 2
     b7a:	24 60       	ori	r18, 0x04	; 4
     b7c:	29 c0       	rjmp	.+82     	; 0xbd0 <vfprintf+0xd8>
     b7e:	28 60       	ori	r18, 0x08	; 8
     b80:	27 c0       	rjmp	.+78     	; 0xbd0 <vfprintf+0xd8>
     b82:	20 61       	ori	r18, 0x10	; 16
     b84:	25 c0       	rjmp	.+74     	; 0xbd0 <vfprintf+0xd8>
     b86:	27 fd       	sbrc	r18, 7
     b88:	2c c0       	rjmp	.+88     	; 0xbe2 <vfprintf+0xea>
     b8a:	38 2f       	mov	r19, r24
     b8c:	30 53       	subi	r19, 0x30	; 48
     b8e:	3a 30       	cpi	r19, 0x0A	; 10
     b90:	98 f4       	brcc	.+38     	; 0xbb8 <vfprintf+0xc0>
     b92:	26 ff       	sbrs	r18, 6
     b94:	08 c0       	rjmp	.+16     	; 0xba6 <vfprintf+0xae>
     b96:	8e 2d       	mov	r24, r14
     b98:	88 0f       	add	r24, r24
     b9a:	e8 2e       	mov	r14, r24
     b9c:	ee 0c       	add	r14, r14
     b9e:	ee 0c       	add	r14, r14
     ba0:	e8 0e       	add	r14, r24
     ba2:	e3 0e       	add	r14, r19
     ba4:	15 c0       	rjmp	.+42     	; 0xbd0 <vfprintf+0xd8>
     ba6:	8f 2d       	mov	r24, r15
     ba8:	88 0f       	add	r24, r24
     baa:	f8 2e       	mov	r15, r24
     bac:	ff 0c       	add	r15, r15
     bae:	ff 0c       	add	r15, r15
     bb0:	f8 0e       	add	r15, r24
     bb2:	f3 0e       	add	r15, r19
     bb4:	20 62       	ori	r18, 0x20	; 32
     bb6:	0c c0       	rjmp	.+24     	; 0xbd0 <vfprintf+0xd8>
     bb8:	8e 32       	cpi	r24, 0x2E	; 46
     bba:	21 f4       	brne	.+8      	; 0xbc4 <vfprintf+0xcc>
     bbc:	26 fd       	sbrc	r18, 6
     bbe:	78 c1       	rjmp	.+752    	; 0xeb0 <vfprintf+0x3b8>
     bc0:	20 64       	ori	r18, 0x40	; 64
     bc2:	06 c0       	rjmp	.+12     	; 0xbd0 <vfprintf+0xd8>
     bc4:	8c 36       	cpi	r24, 0x6C	; 108
     bc6:	11 f4       	brne	.+4      	; 0xbcc <vfprintf+0xd4>
     bc8:	20 68       	ori	r18, 0x80	; 128
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <vfprintf+0xd8>
     bcc:	88 36       	cpi	r24, 0x68	; 104
     bce:	49 f4       	brne	.+18     	; 0xbe2 <vfprintf+0xea>
     bd0:	f1 01       	movw	r30, r2
     bd2:	93 fd       	sbrc	r25, 3
     bd4:	85 91       	lpm	r24, Z+
     bd6:	93 ff       	sbrs	r25, 3
     bd8:	81 91       	ld	r24, Z+
     bda:	1f 01       	movw	r2, r30
     bdc:	88 23       	and	r24, r24
     bde:	09 f0       	breq	.+2      	; 0xbe2 <vfprintf+0xea>
     be0:	ba cf       	rjmp	.-140    	; 0xb56 <vfprintf+0x5e>
     be2:	98 2f       	mov	r25, r24
     be4:	95 54       	subi	r25, 0x45	; 69
     be6:	93 30       	cpi	r25, 0x03	; 3
     be8:	18 f0       	brcs	.+6      	; 0xbf0 <vfprintf+0xf8>
     bea:	90 52       	subi	r25, 0x20	; 32
     bec:	93 30       	cpi	r25, 0x03	; 3
     bee:	28 f4       	brcc	.+10     	; 0xbfa <vfprintf+0x102>
     bf0:	0c 5f       	subi	r16, 0xFC	; 252
     bf2:	1f 4f       	sbci	r17, 0xFF	; 255
     bf4:	ff e3       	ldi	r31, 0x3F	; 63
     bf6:	f9 83       	std	Y+1, r31	; 0x01
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <vfprintf+0x11c>
     bfa:	83 36       	cpi	r24, 0x63	; 99
     bfc:	31 f0       	breq	.+12     	; 0xc0a <vfprintf+0x112>
     bfe:	83 37       	cpi	r24, 0x73	; 115
     c00:	71 f0       	breq	.+28     	; 0xc1e <vfprintf+0x126>
     c02:	83 35       	cpi	r24, 0x53	; 83
     c04:	09 f0       	breq	.+2      	; 0xc08 <vfprintf+0x110>
     c06:	60 c0       	rjmp	.+192    	; 0xcc8 <vfprintf+0x1d0>
     c08:	22 c0       	rjmp	.+68     	; 0xc4e <vfprintf+0x156>
     c0a:	f8 01       	movw	r30, r16
     c0c:	80 81       	ld	r24, Z
     c0e:	89 83       	std	Y+1, r24	; 0x01
     c10:	0e 5f       	subi	r16, 0xFE	; 254
     c12:	1f 4f       	sbci	r17, 0xFF	; 255
     c14:	42 01       	movw	r8, r4
     c16:	71 e0       	ldi	r23, 0x01	; 1
     c18:	a7 2e       	mov	r10, r23
     c1a:	b1 2c       	mov	r11, r1
     c1c:	16 c0       	rjmp	.+44     	; 0xc4a <vfprintf+0x152>
     c1e:	62 e0       	ldi	r22, 0x02	; 2
     c20:	66 2e       	mov	r6, r22
     c22:	71 2c       	mov	r7, r1
     c24:	60 0e       	add	r6, r16
     c26:	71 1e       	adc	r7, r17
     c28:	f8 01       	movw	r30, r16
     c2a:	80 80       	ld	r8, Z
     c2c:	91 80       	ldd	r9, Z+1	; 0x01
     c2e:	26 ff       	sbrs	r18, 6
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <vfprintf+0x140>
     c32:	6e 2d       	mov	r22, r14
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <vfprintf+0x144>
     c38:	6f ef       	ldi	r22, 0xFF	; 255
     c3a:	7f ef       	ldi	r23, 0xFF	; 255
     c3c:	c4 01       	movw	r24, r8
     c3e:	2c 87       	std	Y+12, r18	; 0x0c
     c40:	0e 94 3d 0a 	call	0x147a	; 0x147a <strnlen>
     c44:	5c 01       	movw	r10, r24
     c46:	83 01       	movw	r16, r6
     c48:	2c 85       	ldd	r18, Y+12	; 0x0c
     c4a:	2f 77       	andi	r18, 0x7F	; 127
     c4c:	17 c0       	rjmp	.+46     	; 0xc7c <vfprintf+0x184>
     c4e:	52 e0       	ldi	r21, 0x02	; 2
     c50:	65 2e       	mov	r6, r21
     c52:	71 2c       	mov	r7, r1
     c54:	60 0e       	add	r6, r16
     c56:	71 1e       	adc	r7, r17
     c58:	f8 01       	movw	r30, r16
     c5a:	80 80       	ld	r8, Z
     c5c:	91 80       	ldd	r9, Z+1	; 0x01
     c5e:	26 ff       	sbrs	r18, 6
     c60:	03 c0       	rjmp	.+6      	; 0xc68 <vfprintf+0x170>
     c62:	6e 2d       	mov	r22, r14
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0x174>
     c68:	6f ef       	ldi	r22, 0xFF	; 255
     c6a:	7f ef       	ldi	r23, 0xFF	; 255
     c6c:	c4 01       	movw	r24, r8
     c6e:	2c 87       	std	Y+12, r18	; 0x0c
     c70:	0e 94 32 0a 	call	0x1464	; 0x1464 <strnlen_P>
     c74:	5c 01       	movw	r10, r24
     c76:	2c 85       	ldd	r18, Y+12	; 0x0c
     c78:	20 68       	ori	r18, 0x80	; 128
     c7a:	83 01       	movw	r16, r6
     c7c:	23 fd       	sbrc	r18, 3
     c7e:	20 c0       	rjmp	.+64     	; 0xcc0 <vfprintf+0x1c8>
     c80:	08 c0       	rjmp	.+16     	; 0xc92 <vfprintf+0x19a>
     c82:	80 e2       	ldi	r24, 0x20	; 32
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	b6 01       	movw	r22, r12
     c88:	2c 87       	std	Y+12, r18	; 0x0c
     c8a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
     c8e:	fa 94       	dec	r15
     c90:	2c 85       	ldd	r18, Y+12	; 0x0c
     c92:	8f 2d       	mov	r24, r15
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a8 16       	cp	r10, r24
     c98:	b9 06       	cpc	r11, r25
     c9a:	98 f3       	brcs	.-26     	; 0xc82 <vfprintf+0x18a>
     c9c:	11 c0       	rjmp	.+34     	; 0xcc0 <vfprintf+0x1c8>
     c9e:	f4 01       	movw	r30, r8
     ca0:	27 fd       	sbrc	r18, 7
     ca2:	85 91       	lpm	r24, Z+
     ca4:	27 ff       	sbrs	r18, 7
     ca6:	81 91       	ld	r24, Z+
     ca8:	4f 01       	movw	r8, r30
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	b6 01       	movw	r22, r12
     cae:	2c 87       	std	Y+12, r18	; 0x0c
     cb0:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
     cb4:	2c 85       	ldd	r18, Y+12	; 0x0c
     cb6:	f1 10       	cpse	r15, r1
     cb8:	fa 94       	dec	r15
     cba:	08 94       	sec
     cbc:	a1 08       	sbc	r10, r1
     cbe:	b1 08       	sbc	r11, r1
     cc0:	a1 14       	cp	r10, r1
     cc2:	b1 04       	cpc	r11, r1
     cc4:	61 f7       	brne	.-40     	; 0xc9e <vfprintf+0x1a6>
     cc6:	f1 c0       	rjmp	.+482    	; 0xeaa <vfprintf+0x3b2>
     cc8:	84 36       	cpi	r24, 0x64	; 100
     cca:	11 f0       	breq	.+4      	; 0xcd0 <vfprintf+0x1d8>
     ccc:	89 36       	cpi	r24, 0x69	; 105
     cce:	49 f5       	brne	.+82     	; 0xd22 <vfprintf+0x22a>
     cd0:	27 ff       	sbrs	r18, 7
     cd2:	08 c0       	rjmp	.+16     	; 0xce4 <vfprintf+0x1ec>
     cd4:	f8 01       	movw	r30, r16
     cd6:	60 81       	ld	r22, Z
     cd8:	71 81       	ldd	r23, Z+1	; 0x01
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	93 81       	ldd	r25, Z+3	; 0x03
     cde:	0c 5f       	subi	r16, 0xFC	; 252
     ce0:	1f 4f       	sbci	r17, 0xFF	; 255
     ce2:	09 c0       	rjmp	.+18     	; 0xcf6 <vfprintf+0x1fe>
     ce4:	f8 01       	movw	r30, r16
     ce6:	60 81       	ld	r22, Z
     ce8:	71 81       	ldd	r23, Z+1	; 0x01
     cea:	88 27       	eor	r24, r24
     cec:	77 fd       	sbrc	r23, 7
     cee:	80 95       	com	r24
     cf0:	98 2f       	mov	r25, r24
     cf2:	0e 5f       	subi	r16, 0xFE	; 254
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	4f e6       	ldi	r20, 0x6F	; 111
     cf8:	b4 2e       	mov	r11, r20
     cfa:	b2 22       	and	r11, r18
     cfc:	97 ff       	sbrs	r25, 7
     cfe:	09 c0       	rjmp	.+18     	; 0xd12 <vfprintf+0x21a>
     d00:	90 95       	com	r25
     d02:	80 95       	com	r24
     d04:	70 95       	com	r23
     d06:	61 95       	neg	r22
     d08:	7f 4f       	sbci	r23, 0xFF	; 255
     d0a:	8f 4f       	sbci	r24, 0xFF	; 255
     d0c:	9f 4f       	sbci	r25, 0xFF	; 255
     d0e:	f0 e8       	ldi	r31, 0x80	; 128
     d10:	bf 2a       	or	r11, r31
     d12:	a2 01       	movw	r20, r4
     d14:	2a e0       	ldi	r18, 0x0A	; 10
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__ultoa_invert>
     d1c:	78 2e       	mov	r7, r24
     d1e:	74 18       	sub	r7, r4
     d20:	45 c0       	rjmp	.+138    	; 0xdac <vfprintf+0x2b4>
     d22:	85 37       	cpi	r24, 0x75	; 117
     d24:	31 f4       	brne	.+12     	; 0xd32 <vfprintf+0x23a>
     d26:	3f ee       	ldi	r19, 0xEF	; 239
     d28:	b3 2e       	mov	r11, r19
     d2a:	b2 22       	and	r11, r18
     d2c:	2a e0       	ldi	r18, 0x0A	; 10
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	25 c0       	rjmp	.+74     	; 0xd7c <vfprintf+0x284>
     d32:	99 ef       	ldi	r25, 0xF9	; 249
     d34:	b9 2e       	mov	r11, r25
     d36:	b2 22       	and	r11, r18
     d38:	8f 36       	cpi	r24, 0x6F	; 111
     d3a:	c1 f0       	breq	.+48     	; 0xd6c <vfprintf+0x274>
     d3c:	80 37       	cpi	r24, 0x70	; 112
     d3e:	20 f4       	brcc	.+8      	; 0xd48 <vfprintf+0x250>
     d40:	88 35       	cpi	r24, 0x58	; 88
     d42:	09 f0       	breq	.+2      	; 0xd46 <vfprintf+0x24e>
     d44:	b5 c0       	rjmp	.+362    	; 0xeb0 <vfprintf+0x3b8>
     d46:	0d c0       	rjmp	.+26     	; 0xd62 <vfprintf+0x26a>
     d48:	80 37       	cpi	r24, 0x70	; 112
     d4a:	21 f0       	breq	.+8      	; 0xd54 <vfprintf+0x25c>
     d4c:	88 37       	cpi	r24, 0x78	; 120
     d4e:	09 f0       	breq	.+2      	; 0xd52 <vfprintf+0x25a>
     d50:	af c0       	rjmp	.+350    	; 0xeb0 <vfprintf+0x3b8>
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <vfprintf+0x260>
     d54:	20 e1       	ldi	r18, 0x10	; 16
     d56:	b2 2a       	or	r11, r18
     d58:	b4 fe       	sbrs	r11, 4
     d5a:	0b c0       	rjmp	.+22     	; 0xd72 <vfprintf+0x27a>
     d5c:	84 e0       	ldi	r24, 0x04	; 4
     d5e:	b8 2a       	or	r11, r24
     d60:	08 c0       	rjmp	.+16     	; 0xd72 <vfprintf+0x27a>
     d62:	b4 fe       	sbrs	r11, 4
     d64:	09 c0       	rjmp	.+18     	; 0xd78 <vfprintf+0x280>
     d66:	e6 e0       	ldi	r30, 0x06	; 6
     d68:	be 2a       	or	r11, r30
     d6a:	06 c0       	rjmp	.+12     	; 0xd78 <vfprintf+0x280>
     d6c:	28 e0       	ldi	r18, 0x08	; 8
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <vfprintf+0x284>
     d72:	20 e1       	ldi	r18, 0x10	; 16
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <vfprintf+0x284>
     d78:	20 e1       	ldi	r18, 0x10	; 16
     d7a:	32 e0       	ldi	r19, 0x02	; 2
     d7c:	b7 fe       	sbrs	r11, 7
     d7e:	08 c0       	rjmp	.+16     	; 0xd90 <vfprintf+0x298>
     d80:	f8 01       	movw	r30, r16
     d82:	60 81       	ld	r22, Z
     d84:	71 81       	ldd	r23, Z+1	; 0x01
     d86:	82 81       	ldd	r24, Z+2	; 0x02
     d88:	93 81       	ldd	r25, Z+3	; 0x03
     d8a:	0c 5f       	subi	r16, 0xFC	; 252
     d8c:	1f 4f       	sbci	r17, 0xFF	; 255
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <vfprintf+0x2a6>
     d90:	f8 01       	movw	r30, r16
     d92:	60 81       	ld	r22, Z
     d94:	71 81       	ldd	r23, Z+1	; 0x01
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 5f       	subi	r16, 0xFE	; 254
     d9c:	1f 4f       	sbci	r17, 0xFF	; 255
     d9e:	a2 01       	movw	r20, r4
     da0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__ultoa_invert>
     da4:	78 2e       	mov	r7, r24
     da6:	74 18       	sub	r7, r4
     da8:	ff e7       	ldi	r31, 0x7F	; 127
     daa:	bf 22       	and	r11, r31
     dac:	b6 fe       	sbrs	r11, 6
     dae:	0b c0       	rjmp	.+22     	; 0xdc6 <vfprintf+0x2ce>
     db0:	2e ef       	ldi	r18, 0xFE	; 254
     db2:	b2 22       	and	r11, r18
     db4:	7e 14       	cp	r7, r14
     db6:	38 f4       	brcc	.+14     	; 0xdc6 <vfprintf+0x2ce>
     db8:	b4 fe       	sbrs	r11, 4
     dba:	07 c0       	rjmp	.+14     	; 0xdca <vfprintf+0x2d2>
     dbc:	b2 fc       	sbrc	r11, 2
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <vfprintf+0x2d2>
     dc0:	8f ee       	ldi	r24, 0xEF	; 239
     dc2:	b8 22       	and	r11, r24
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <vfprintf+0x2d2>
     dc6:	a7 2c       	mov	r10, r7
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <vfprintf+0x2d4>
     dca:	ae 2c       	mov	r10, r14
     dcc:	8b 2d       	mov	r24, r11
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	b4 fe       	sbrs	r11, 4
     dd2:	0d c0       	rjmp	.+26     	; 0xdee <vfprintf+0x2f6>
     dd4:	fe 01       	movw	r30, r28
     dd6:	e7 0d       	add	r30, r7
     dd8:	f1 1d       	adc	r31, r1
     dda:	20 81       	ld	r18, Z
     ddc:	20 33       	cpi	r18, 0x30	; 48
     dde:	19 f4       	brne	.+6      	; 0xde6 <vfprintf+0x2ee>
     de0:	e9 ee       	ldi	r30, 0xE9	; 233
     de2:	be 22       	and	r11, r30
     de4:	09 c0       	rjmp	.+18     	; 0xdf8 <vfprintf+0x300>
     de6:	a3 94       	inc	r10
     de8:	b2 fe       	sbrs	r11, 2
     dea:	06 c0       	rjmp	.+12     	; 0xdf8 <vfprintf+0x300>
     dec:	04 c0       	rjmp	.+8      	; 0xdf6 <vfprintf+0x2fe>
     dee:	86 78       	andi	r24, 0x86	; 134
     df0:	90 70       	andi	r25, 0x00	; 0
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	09 f0       	breq	.+2      	; 0xdf8 <vfprintf+0x300>
     df6:	a3 94       	inc	r10
     df8:	8b 2c       	mov	r8, r11
     dfa:	99 24       	eor	r9, r9
     dfc:	b3 fc       	sbrc	r11, 3
     dfe:	14 c0       	rjmp	.+40     	; 0xe28 <vfprintf+0x330>
     e00:	b0 fe       	sbrs	r11, 0
     e02:	0f c0       	rjmp	.+30     	; 0xe22 <vfprintf+0x32a>
     e04:	af 14       	cp	r10, r15
     e06:	28 f4       	brcc	.+10     	; 0xe12 <vfprintf+0x31a>
     e08:	e7 2c       	mov	r14, r7
     e0a:	ef 0c       	add	r14, r15
     e0c:	ea 18       	sub	r14, r10
     e0e:	af 2c       	mov	r10, r15
     e10:	08 c0       	rjmp	.+16     	; 0xe22 <vfprintf+0x32a>
     e12:	e7 2c       	mov	r14, r7
     e14:	06 c0       	rjmp	.+12     	; 0xe22 <vfprintf+0x32a>
     e16:	80 e2       	ldi	r24, 0x20	; 32
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	b6 01       	movw	r22, r12
     e1c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
     e20:	a3 94       	inc	r10
     e22:	af 14       	cp	r10, r15
     e24:	c0 f3       	brcs	.-16     	; 0xe16 <vfprintf+0x31e>
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <vfprintf+0x338>
     e28:	af 14       	cp	r10, r15
     e2a:	10 f4       	brcc	.+4      	; 0xe30 <vfprintf+0x338>
     e2c:	fa 18       	sub	r15, r10
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <vfprintf+0x33a>
     e30:	ff 24       	eor	r15, r15
     e32:	84 fe       	sbrs	r8, 4
     e34:	0f c0       	rjmp	.+30     	; 0xe54 <vfprintf+0x35c>
     e36:	80 e3       	ldi	r24, 0x30	; 48
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	b6 01       	movw	r22, r12
     e3c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
     e40:	82 fe       	sbrs	r8, 2
     e42:	1f c0       	rjmp	.+62     	; 0xe82 <vfprintf+0x38a>
     e44:	81 fe       	sbrs	r8, 1
     e46:	03 c0       	rjmp	.+6      	; 0xe4e <vfprintf+0x356>
     e48:	88 e5       	ldi	r24, 0x58	; 88
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	10 c0       	rjmp	.+32     	; 0xe6e <vfprintf+0x376>
     e4e:	88 e7       	ldi	r24, 0x78	; 120
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0d c0       	rjmp	.+26     	; 0xe6e <vfprintf+0x376>
     e54:	c4 01       	movw	r24, r8
     e56:	86 78       	andi	r24, 0x86	; 134
     e58:	90 70       	andi	r25, 0x00	; 0
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	91 f0       	breq	.+36     	; 0xe82 <vfprintf+0x38a>
     e5e:	81 fc       	sbrc	r8, 1
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <vfprintf+0x36e>
     e62:	80 e2       	ldi	r24, 0x20	; 32
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <vfprintf+0x370>
     e66:	8b e2       	ldi	r24, 0x2B	; 43
     e68:	b7 fc       	sbrc	r11, 7
     e6a:	8d e2       	ldi	r24, 0x2D	; 45
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	b6 01       	movw	r22, r12
     e70:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
     e74:	06 c0       	rjmp	.+12     	; 0xe82 <vfprintf+0x38a>
     e76:	80 e3       	ldi	r24, 0x30	; 48
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	b6 01       	movw	r22, r12
     e7c:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
     e80:	ea 94       	dec	r14
     e82:	7e 14       	cp	r7, r14
     e84:	c0 f3       	brcs	.-16     	; 0xe76 <vfprintf+0x37e>
     e86:	7a 94       	dec	r7
     e88:	f2 01       	movw	r30, r4
     e8a:	e7 0d       	add	r30, r7
     e8c:	f1 1d       	adc	r31, r1
     e8e:	80 81       	ld	r24, Z
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	b6 01       	movw	r22, r12
     e94:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
     e98:	77 20       	and	r7, r7
     e9a:	a9 f7       	brne	.-22     	; 0xe86 <vfprintf+0x38e>
     e9c:	06 c0       	rjmp	.+12     	; 0xeaa <vfprintf+0x3b2>
     e9e:	80 e2       	ldi	r24, 0x20	; 32
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	b6 01       	movw	r22, r12
     ea4:	0e 94 8a 0a 	call	0x1514	; 0x1514 <fputc>
     ea8:	fa 94       	dec	r15
     eaa:	ff 20       	and	r15, r15
     eac:	c1 f7       	brne	.-16     	; 0xe9e <vfprintf+0x3a6>
     eae:	37 ce       	rjmp	.-914    	; 0xb1e <vfprintf+0x26>
     eb0:	f6 01       	movw	r30, r12
     eb2:	26 81       	ldd	r18, Z+6	; 0x06
     eb4:	37 81       	ldd	r19, Z+7	; 0x07
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <vfprintf+0x3c4>
     eb8:	2f ef       	ldi	r18, 0xFF	; 255
     eba:	3f ef       	ldi	r19, 0xFF	; 255
     ebc:	c9 01       	movw	r24, r18
     ebe:	2c 96       	adiw	r28, 0x0c	; 12
     ec0:	e2 e1       	ldi	r30, 0x12	; 18
     ec2:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__epilogue_restores__>

00000ec6 <putval>:
     ec6:	20 fd       	sbrc	r18, 0
     ec8:	09 c0       	rjmp	.+18     	; 0xedc <putval+0x16>
     eca:	fc 01       	movw	r30, r24
     ecc:	23 fd       	sbrc	r18, 3
     ece:	05 c0       	rjmp	.+10     	; 0xeda <putval+0x14>
     ed0:	22 ff       	sbrs	r18, 2
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <putval+0x12>
     ed4:	73 83       	std	Z+3, r23	; 0x03
     ed6:	62 83       	std	Z+2, r22	; 0x02
     ed8:	51 83       	std	Z+1, r21	; 0x01
     eda:	40 83       	st	Z, r20
     edc:	08 95       	ret

00000ede <mulacc>:
     ede:	ef 92       	push	r14
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	44 fd       	sbrc	r20, 4
     ee8:	10 c0       	rjmp	.+32     	; 0xf0a <mulacc+0x2c>
     eea:	46 fd       	sbrc	r20, 6
     eec:	10 c0       	rjmp	.+32     	; 0xf0e <mulacc+0x30>
     eee:	db 01       	movw	r26, r22
     ef0:	fc 01       	movw	r30, r24
     ef2:	aa 0f       	add	r26, r26
     ef4:	bb 1f       	adc	r27, r27
     ef6:	ee 1f       	adc	r30, r30
     ef8:	ff 1f       	adc	r31, r31
     efa:	10 94       	com	r1
     efc:	d1 f7       	brne	.-12     	; 0xef2 <mulacc+0x14>
     efe:	6a 0f       	add	r22, r26
     f00:	7b 1f       	adc	r23, r27
     f02:	8e 1f       	adc	r24, r30
     f04:	9f 1f       	adc	r25, r31
     f06:	31 e0       	ldi	r19, 0x01	; 1
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <mulacc+0x32>
     f0a:	33 e0       	ldi	r19, 0x03	; 3
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <mulacc+0x32>
     f0e:	34 e0       	ldi	r19, 0x04	; 4
     f10:	66 0f       	add	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	31 50       	subi	r19, 0x01	; 1
     f1a:	d1 f7       	brne	.-12     	; 0xf10 <mulacc+0x32>
     f1c:	7b 01       	movw	r14, r22
     f1e:	8c 01       	movw	r16, r24
     f20:	e2 0e       	add	r14, r18
     f22:	f1 1c       	adc	r15, r1
     f24:	01 1d       	adc	r16, r1
     f26:	11 1d       	adc	r17, r1
     f28:	a8 01       	movw	r20, r16
     f2a:	97 01       	movw	r18, r14
     f2c:	b7 01       	movw	r22, r14
     f2e:	ca 01       	movw	r24, r20
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	08 95       	ret

00000f3a <skip_spaces>:
     f3a:	ef 92       	push	r14
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	8c 01       	movw	r16, r24
     f48:	c8 01       	movw	r24, r16
     f4a:	0e 94 48 0a 	call	0x1490	; 0x1490 <fgetc>
     f4e:	ec 01       	movw	r28, r24
     f50:	97 fd       	sbrc	r25, 7
     f52:	09 c0       	rjmp	.+18     	; 0xf66 <skip_spaces+0x2c>
     f54:	0e 94 1f 0a 	call	0x143e	; 0x143e <isspace>
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	b1 f7       	brne	.-20     	; 0xf48 <skip_spaces+0xe>
     f5c:	7e 01       	movw	r14, r28
     f5e:	ce 01       	movw	r24, r28
     f60:	b8 01       	movw	r22, r16
     f62:	0e 94 b6 0a 	call	0x156c	; 0x156c <ungetc>
     f66:	ce 01       	movw	r24, r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	e6 e0       	ldi	r30, 0x06	; 6
     f6e:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <__epilogue_restores__+0x18>

00000f72 <conv_int>:
     f72:	8f 92       	push	r8
     f74:	9f 92       	push	r9
     f76:	af 92       	push	r10
     f78:	bf 92       	push	r11
     f7a:	df 92       	push	r13
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	0f 92       	push	r0
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	4c 01       	movw	r8, r24
     f90:	d6 2e       	mov	r13, r22
     f92:	5a 01       	movw	r10, r20
     f94:	12 2f       	mov	r17, r18
     f96:	0e 94 48 0a 	call	0x1490	; 0x1490 <fgetc>
     f9a:	8b 32       	cpi	r24, 0x2B	; 43
     f9c:	19 f0       	breq	.+6      	; 0xfa4 <conv_int+0x32>
     f9e:	8d 32       	cpi	r24, 0x2D	; 45
     fa0:	49 f4       	brne	.+18     	; 0xfb4 <conv_int+0x42>
     fa2:	10 68       	ori	r17, 0x80	; 128
     fa4:	da 94       	dec	r13
     fa6:	09 f4       	brne	.+2      	; 0xfaa <conv_int+0x38>
     fa8:	6c c0       	rjmp	.+216    	; 0x1082 <conv_int+0x110>
     faa:	c4 01       	movw	r24, r8
     fac:	0e 94 48 0a 	call	0x1490	; 0x1490 <fgetc>
     fb0:	97 fd       	sbrc	r25, 7
     fb2:	67 c0       	rjmp	.+206    	; 0x1082 <conv_int+0x110>
     fb4:	31 2f       	mov	r19, r17
     fb6:	3d 7f       	andi	r19, 0xFD	; 253
     fb8:	23 2f       	mov	r18, r19
     fba:	20 73       	andi	r18, 0x30	; 48
     fbc:	f1 f4       	brne	.+60     	; 0xffa <conv_int+0x88>
     fbe:	80 33       	cpi	r24, 0x30	; 48
     fc0:	e1 f4       	brne	.+56     	; 0xffa <conv_int+0x88>
     fc2:	da 94       	dec	r13
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <conv_int+0x56>
     fc6:	48 c0       	rjmp	.+144    	; 0x1058 <conv_int+0xe6>
     fc8:	c4 01       	movw	r24, r8
     fca:	39 83       	std	Y+1, r19	; 0x01
     fcc:	0e 94 48 0a 	call	0x1490	; 0x1490 <fgetc>
     fd0:	39 81       	ldd	r19, Y+1	; 0x01
     fd2:	97 fd       	sbrc	r25, 7
     fd4:	41 c0       	rjmp	.+130    	; 0x1058 <conv_int+0xe6>
     fd6:	32 60       	ori	r19, 0x02	; 2
     fd8:	88 37       	cpi	r24, 0x78	; 120
     fda:	11 f0       	breq	.+4      	; 0xfe0 <conv_int+0x6e>
     fdc:	88 35       	cpi	r24, 0x58	; 88
     fde:	59 f4       	brne	.+22     	; 0xff6 <conv_int+0x84>
     fe0:	30 64       	ori	r19, 0x40	; 64
     fe2:	da 94       	dec	r13
     fe4:	c9 f1       	breq	.+114    	; 0x1058 <conv_int+0xe6>
     fe6:	c4 01       	movw	r24, r8
     fe8:	39 83       	std	Y+1, r19	; 0x01
     fea:	0e 94 48 0a 	call	0x1490	; 0x1490 <fgetc>
     fee:	39 81       	ldd	r19, Y+1	; 0x01
     ff0:	97 ff       	sbrs	r25, 7
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <conv_int+0x88>
     ff4:	31 c0       	rjmp	.+98     	; 0x1058 <conv_int+0xe6>
     ff6:	36 ff       	sbrs	r19, 6
     ff8:	30 61       	ori	r19, 0x10	; 16
     ffa:	ee 24       	eor	r14, r14
     ffc:	ff 24       	eor	r15, r15
     ffe:	87 01       	movw	r16, r14
    1000:	28 2f       	mov	r18, r24
    1002:	20 53       	subi	r18, 0x30	; 48
    1004:	28 30       	cpi	r18, 0x08	; 8
    1006:	90 f0       	brcs	.+36     	; 0x102c <conv_int+0xba>
    1008:	34 fd       	sbrc	r19, 4
    100a:	09 c0       	rjmp	.+18     	; 0x101e <conv_int+0xac>
    100c:	2a 30       	cpi	r18, 0x0A	; 10
    100e:	70 f0       	brcs	.+28     	; 0x102c <conv_int+0xba>
    1010:	36 ff       	sbrs	r19, 6
    1012:	05 c0       	rjmp	.+10     	; 0x101e <conv_int+0xac>
    1014:	2f 7d       	andi	r18, 0xDF	; 223
    1016:	42 2f       	mov	r20, r18
    1018:	41 51       	subi	r20, 0x11	; 17
    101a:	46 30       	cpi	r20, 0x06	; 6
    101c:	30 f0       	brcs	.+12     	; 0x102a <conv_int+0xb8>
    101e:	b4 01       	movw	r22, r8
    1020:	39 83       	std	Y+1, r19	; 0x01
    1022:	0e 94 b6 0a 	call	0x156c	; 0x156c <ungetc>
    1026:	39 81       	ldd	r19, Y+1	; 0x01
    1028:	14 c0       	rjmp	.+40     	; 0x1052 <conv_int+0xe0>
    102a:	27 50       	subi	r18, 0x07	; 7
    102c:	c8 01       	movw	r24, r16
    102e:	b7 01       	movw	r22, r14
    1030:	43 2f       	mov	r20, r19
    1032:	39 83       	std	Y+1, r19	; 0x01
    1034:	0e 94 6f 07 	call	0xede	; 0xede <mulacc>
    1038:	7b 01       	movw	r14, r22
    103a:	8c 01       	movw	r16, r24
    103c:	39 81       	ldd	r19, Y+1	; 0x01
    103e:	32 60       	ori	r19, 0x02	; 2
    1040:	da 94       	dec	r13
    1042:	69 f0       	breq	.+26     	; 0x105e <conv_int+0xec>
    1044:	c4 01       	movw	r24, r8
    1046:	39 83       	std	Y+1, r19	; 0x01
    1048:	0e 94 48 0a 	call	0x1490	; 0x1490 <fgetc>
    104c:	39 81       	ldd	r19, Y+1	; 0x01
    104e:	97 ff       	sbrs	r25, 7
    1050:	d7 cf       	rjmp	.-82     	; 0x1000 <conv_int+0x8e>
    1052:	31 fd       	sbrc	r19, 1
    1054:	04 c0       	rjmp	.+8      	; 0x105e <conv_int+0xec>
    1056:	15 c0       	rjmp	.+42     	; 0x1082 <conv_int+0x110>
    1058:	ee 24       	eor	r14, r14
    105a:	ff 24       	eor	r15, r15
    105c:	87 01       	movw	r16, r14
    105e:	37 ff       	sbrs	r19, 7
    1060:	08 c0       	rjmp	.+16     	; 0x1072 <conv_int+0x100>
    1062:	10 95       	com	r17
    1064:	00 95       	com	r16
    1066:	f0 94       	com	r15
    1068:	e0 94       	com	r14
    106a:	e1 1c       	adc	r14, r1
    106c:	f1 1c       	adc	r15, r1
    106e:	01 1d       	adc	r16, r1
    1070:	11 1d       	adc	r17, r1
    1072:	c5 01       	movw	r24, r10
    1074:	b8 01       	movw	r22, r16
    1076:	a7 01       	movw	r20, r14
    1078:	23 2f       	mov	r18, r19
    107a:	0e 94 63 07 	call	0xec6	; 0xec6 <putval>
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <conv_int+0x112>
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	0f 90       	pop	r0
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	df 90       	pop	r13
    1094:	bf 90       	pop	r11
    1096:	af 90       	pop	r10
    1098:	9f 90       	pop	r9
    109a:	8f 90       	pop	r8
    109c:	08 95       	ret

0000109e <conv_brk>:
    109e:	a1 e2       	ldi	r26, 0x21	; 33
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e5       	ldi	r30, 0x55	; 85
    10a4:	f8 e0       	ldi	r31, 0x08	; 8
    10a6:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__prologue_saves__+0x8>
    10aa:	6c 01       	movw	r12, r24
    10ac:	8a 01       	movw	r16, r20
    10ae:	79 01       	movw	r14, r18
    10b0:	9e 01       	movw	r18, r28
    10b2:	2f 5f       	subi	r18, 0xFF	; 255
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    10b6:	80 e2       	ldi	r24, 0x20	; 32
    10b8:	f9 01       	movw	r30, r18
    10ba:	11 92       	st	Z+, r1
    10bc:	8a 95       	dec	r24
    10be:	e9 f7       	brne	.-6      	; 0x10ba <conv_brk+0x1c>
    10c0:	f6 01       	movw	r30, r12
    10c2:	83 80       	ldd	r8, Z+3	; 0x03
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	bb 24       	eor	r11, r11
    10ca:	99 24       	eor	r9, r9
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	a1 e0       	ldi	r26, 0x01	; 1
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	f7 01       	movw	r30, r14
    10d4:	83 fc       	sbrc	r8, 3
    10d6:	a5 90       	lpm	r10, Z+
    10d8:	83 fe       	sbrs	r8, 3
    10da:	a1 90       	ld	r10, Z+
    10dc:	7f 01       	movw	r14, r30
    10de:	aa 20       	and	r10, r10
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <conv_brk+0x46>
    10e2:	7f c0       	rjmp	.+254    	; 0x11e2 <conv_brk+0x144>
    10e4:	fa 2d       	mov	r31, r10
    10e6:	fe 35       	cpi	r31, 0x5E	; 94
    10e8:	11 f4       	brne	.+4      	; 0x10ee <conv_brk+0x50>
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	51 f1       	breq	.+84     	; 0x1142 <conv_brk+0xa4>
    10ee:	47 2f       	mov	r20, r23
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	48 17       	cp	r20, r24
    10f4:	59 07       	cpc	r21, r25
    10f6:	44 f4       	brge	.+16     	; 0x1108 <conv_brk+0x6a>
    10f8:	4a 2d       	mov	r20, r10
    10fa:	4d 35       	cpi	r20, 0x5D	; 93
    10fc:	51 f1       	breq	.+84     	; 0x1152 <conv_brk+0xb4>
    10fe:	4d 32       	cpi	r20, 0x2D	; 45
    1100:	19 f4       	brne	.+6      	; 0x1108 <conv_brk+0x6a>
    1102:	99 20       	and	r9, r9
    1104:	01 f1       	breq	.+64     	; 0x1146 <conv_brk+0xa8>
    1106:	03 c0       	rjmp	.+6      	; 0x110e <conv_brk+0x70>
    1108:	99 20       	and	r9, r9
    110a:	09 f4       	brne	.+2      	; 0x110e <conv_brk+0x70>
    110c:	ba 2c       	mov	r11, r10
    110e:	4a 2d       	mov	r20, r10
    1110:	46 95       	lsr	r20
    1112:	46 95       	lsr	r20
    1114:	46 95       	lsr	r20
    1116:	f9 01       	movw	r30, r18
    1118:	e4 0f       	add	r30, r20
    111a:	f1 1d       	adc	r31, r1
    111c:	4a 2d       	mov	r20, r10
    111e:	47 70       	andi	r20, 0x07	; 7
    1120:	3d 01       	movw	r6, r26
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <conv_brk+0x8a>
    1124:	66 0c       	add	r6, r6
    1126:	77 1c       	adc	r7, r7
    1128:	4a 95       	dec	r20
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <conv_brk+0x86>
    112c:	90 80       	ld	r9, Z
    112e:	96 28       	or	r9, r6
    1130:	90 82       	st	Z, r9
    1132:	ab 14       	cp	r10, r11
    1134:	59 f0       	breq	.+22     	; 0x114c <conv_brk+0xae>
    1136:	ab 14       	cp	r10, r11
    1138:	10 f4       	brcc	.+4      	; 0x113e <conv_brk+0xa0>
    113a:	a3 94       	inc	r10
    113c:	e8 cf       	rjmp	.-48     	; 0x110e <conv_brk+0x70>
    113e:	aa 94       	dec	r10
    1140:	e6 cf       	rjmp	.-52     	; 0x110e <conv_brk+0x70>
    1142:	71 e0       	ldi	r23, 0x01	; 1
    1144:	04 c0       	rjmp	.+8      	; 0x114e <conv_brk+0xb0>
    1146:	99 24       	eor	r9, r9
    1148:	93 94       	inc	r9
    114a:	01 c0       	rjmp	.+2      	; 0x114e <conv_brk+0xb0>
    114c:	99 24       	eor	r9, r9
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	c0 cf       	rjmp	.-128    	; 0x10d2 <conv_brk+0x34>
    1152:	99 20       	and	r9, r9
    1154:	19 f0       	breq	.+6      	; 0x115c <conv_brk+0xbe>
    1156:	8e 81       	ldd	r24, Y+6	; 0x06
    1158:	80 62       	ori	r24, 0x20	; 32
    115a:	8e 83       	std	Y+6, r24	; 0x06
    115c:	77 23       	and	r23, r23
    115e:	51 f0       	breq	.+20     	; 0x1174 <conv_brk+0xd6>
    1160:	ce 01       	movw	r24, r28
    1162:	81 96       	adiw	r24, 0x21	; 33
    1164:	fe 01       	movw	r30, r28
    1166:	31 96       	adiw	r30, 0x01	; 1
    1168:	20 81       	ld	r18, Z
    116a:	20 95       	com	r18
    116c:	21 93       	st	Z+, r18
    116e:	e8 17       	cp	r30, r24
    1170:	f9 07       	cpc	r31, r25
    1172:	d1 f7       	brne	.-12     	; 0x1168 <conv_brk+0xca>
    1174:	bb 24       	eor	r11, r11
    1176:	b3 94       	inc	r11
    1178:	4e 01       	movw	r8, r28
    117a:	08 94       	sec
    117c:	81 1c       	adc	r8, r1
    117e:	91 1c       	adc	r9, r1
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <conv_brk+0xe6>
    1182:	bb 24       	eor	r11, r11
    1184:	c6 01       	movw	r24, r12
    1186:	69 a3       	std	Y+33, r22	; 0x21
    1188:	0e 94 48 0a 	call	0x1490	; 0x1490 <fgetc>
    118c:	69 a1       	ldd	r22, Y+33	; 0x21
    118e:	97 fd       	sbrc	r25, 7
    1190:	20 c0       	rjmp	.+64     	; 0x11d2 <conv_brk+0x134>
    1192:	28 2f       	mov	r18, r24
    1194:	26 95       	lsr	r18
    1196:	26 95       	lsr	r18
    1198:	26 95       	lsr	r18
    119a:	f4 01       	movw	r30, r8
    119c:	e2 0f       	add	r30, r18
    119e:	f1 1d       	adc	r31, r1
    11a0:	20 81       	ld	r18, Z
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	ac 01       	movw	r20, r24
    11a6:	47 70       	andi	r20, 0x07	; 7
    11a8:	50 70       	andi	r21, 0x00	; 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <conv_brk+0x112>
    11ac:	35 95       	asr	r19
    11ae:	27 95       	ror	r18
    11b0:	4a 95       	dec	r20
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <conv_brk+0x10e>
    11b4:	20 fd       	sbrc	r18, 0
    11b6:	04 c0       	rjmp	.+8      	; 0x11c0 <conv_brk+0x122>
    11b8:	b6 01       	movw	r22, r12
    11ba:	0e 94 b6 0a 	call	0x156c	; 0x156c <ungetc>
    11be:	09 c0       	rjmp	.+18     	; 0x11d2 <conv_brk+0x134>
    11c0:	01 15       	cp	r16, r1
    11c2:	11 05       	cpc	r17, r1
    11c4:	19 f0       	breq	.+6      	; 0x11cc <conv_brk+0x12e>
    11c6:	f8 01       	movw	r30, r16
    11c8:	81 93       	st	Z+, r24
    11ca:	8f 01       	movw	r16, r30
    11cc:	61 50       	subi	r22, 0x01	; 1
    11ce:	c9 f6       	brne	.-78     	; 0x1182 <conv_brk+0xe4>
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <conv_brk+0x138>
    11d2:	bb 20       	and	r11, r11
    11d4:	31 f4       	brne	.+12     	; 0x11e2 <conv_brk+0x144>
    11d6:	01 15       	cp	r16, r1
    11d8:	11 05       	cpc	r17, r1
    11da:	29 f0       	breq	.+10     	; 0x11e6 <conv_brk+0x148>
    11dc:	f8 01       	movw	r30, r16
    11de:	10 82       	st	Z, r1
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <conv_brk+0x148>
    11e2:	ee 24       	eor	r14, r14
    11e4:	ff 24       	eor	r15, r15
    11e6:	c7 01       	movw	r24, r14
    11e8:	a1 96       	adiw	r28, 0x21	; 33
    11ea:	ee e0       	ldi	r30, 0x0E	; 14
    11ec:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__epilogue_restores__+0x8>

000011f0 <vfscanf>:
    11f0:	4f 92       	push	r4
    11f2:	5f 92       	push	r5
    11f4:	6f 92       	push	r6
    11f6:	7f 92       	push	r7
    11f8:	9f 92       	push	r9
    11fa:	af 92       	push	r10
    11fc:	bf 92       	push	r11
    11fe:	cf 92       	push	r12
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	0f 92       	push	r0
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	7c 01       	movw	r14, r24
    1216:	6b 01       	movw	r12, r22
    1218:	3a 01       	movw	r6, r20
    121a:	fc 01       	movw	r30, r24
    121c:	17 82       	std	Z+7, r1	; 0x07
    121e:	16 82       	std	Z+6, r1	; 0x06
    1220:	00 e0       	ldi	r16, 0x00	; 0
    1222:	e9 c0       	rjmp	.+466    	; 0x13f6 <vfscanf+0x206>
    1224:	81 2f       	mov	r24, r17
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 1f 0a 	call	0x143e	; 0x143e <isspace>
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	21 f0       	breq	.+8      	; 0x1238 <vfscanf+0x48>
    1230:	c7 01       	movw	r24, r14
    1232:	0e 94 9d 07 	call	0xf3a	; 0xf3a <skip_spaces>
    1236:	df c0       	rjmp	.+446    	; 0x13f6 <vfscanf+0x206>
    1238:	15 32       	cpi	r17, 0x25	; 37
    123a:	41 f4       	brne	.+16     	; 0x124c <vfscanf+0x5c>
    123c:	f6 01       	movw	r30, r12
    123e:	a3 fc       	sbrc	r10, 3
    1240:	35 91       	lpm	r19, Z+
    1242:	a3 fe       	sbrs	r10, 3
    1244:	31 91       	ld	r19, Z+
    1246:	6f 01       	movw	r12, r30
    1248:	35 32       	cpi	r19, 0x25	; 37
    124a:	61 f4       	brne	.+24     	; 0x1264 <vfscanf+0x74>
    124c:	c7 01       	movw	r24, r14
    124e:	0e 94 48 0a 	call	0x1490	; 0x1490 <fgetc>
    1252:	97 fd       	sbrc	r25, 7
    1254:	dc c0       	rjmp	.+440    	; 0x140e <vfscanf+0x21e>
    1256:	18 17       	cp	r17, r24
    1258:	09 f4       	brne	.+2      	; 0x125c <vfscanf+0x6c>
    125a:	cd c0       	rjmp	.+410    	; 0x13f6 <vfscanf+0x206>
    125c:	b7 01       	movw	r22, r14
    125e:	0e 94 b6 0a 	call	0x156c	; 0x156c <ungetc>
    1262:	d7 c0       	rjmp	.+430    	; 0x1412 <vfscanf+0x222>
    1264:	3a 32       	cpi	r19, 0x2A	; 42
    1266:	39 f4       	brne	.+14     	; 0x1276 <vfscanf+0x86>
    1268:	a3 fc       	sbrc	r10, 3
    126a:	35 91       	lpm	r19, Z+
    126c:	a3 fe       	sbrs	r10, 3
    126e:	31 91       	ld	r19, Z+
    1270:	6f 01       	movw	r12, r30
    1272:	11 e0       	ldi	r17, 0x01	; 1
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <vfscanf+0x88>
    1276:	10 e0       	ldi	r17, 0x00	; 0
    1278:	99 24       	eor	r9, r9
    127a:	0f c0       	rjmp	.+30     	; 0x129a <vfscanf+0xaa>
    127c:	12 60       	ori	r17, 0x02	; 2
    127e:	69 2d       	mov	r22, r9
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	40 e2       	ldi	r20, 0x20	; 32
    1288:	0e 94 6f 07 	call	0xede	; 0xede <mulacc>
    128c:	96 2e       	mov	r9, r22
    128e:	f6 01       	movw	r30, r12
    1290:	a3 fc       	sbrc	r10, 3
    1292:	35 91       	lpm	r19, Z+
    1294:	a3 fe       	sbrs	r10, 3
    1296:	31 91       	ld	r19, Z+
    1298:	6f 01       	movw	r12, r30
    129a:	23 2f       	mov	r18, r19
    129c:	20 53       	subi	r18, 0x30	; 48
    129e:	2a 30       	cpi	r18, 0x0A	; 10
    12a0:	68 f3       	brcs	.-38     	; 0x127c <vfscanf+0x8c>
    12a2:	11 ff       	sbrs	r17, 1
    12a4:	03 c0       	rjmp	.+6      	; 0x12ac <vfscanf+0xbc>
    12a6:	99 20       	and	r9, r9
    12a8:	19 f4       	brne	.+6      	; 0x12b0 <vfscanf+0xc0>
    12aa:	b3 c0       	rjmp	.+358    	; 0x1412 <vfscanf+0x222>
    12ac:	99 24       	eor	r9, r9
    12ae:	9a 94       	dec	r9
    12b0:	38 36       	cpi	r19, 0x68	; 104
    12b2:	19 f0       	breq	.+6      	; 0x12ba <vfscanf+0xca>
    12b4:	3c 36       	cpi	r19, 0x6C	; 108
    12b6:	89 f4       	brne	.+34     	; 0x12da <vfscanf+0xea>
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <vfscanf+0xdc>
    12ba:	f6 01       	movw	r30, r12
    12bc:	a3 fc       	sbrc	r10, 3
    12be:	35 91       	lpm	r19, Z+
    12c0:	a3 fe       	sbrs	r10, 3
    12c2:	31 91       	ld	r19, Z+
    12c4:	6f 01       	movw	r12, r30
    12c6:	38 36       	cpi	r19, 0x68	; 104
    12c8:	41 f4       	brne	.+16     	; 0x12da <vfscanf+0xea>
    12ca:	18 60       	ori	r17, 0x08	; 8
    12cc:	14 60       	ori	r17, 0x04	; 4
    12ce:	f6 01       	movw	r30, r12
    12d0:	a3 fc       	sbrc	r10, 3
    12d2:	35 91       	lpm	r19, Z+
    12d4:	a3 fe       	sbrs	r10, 3
    12d6:	31 91       	ld	r19, Z+
    12d8:	6f 01       	movw	r12, r30
    12da:	33 23       	and	r19, r19
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <vfscanf+0xf0>
    12de:	99 c0       	rjmp	.+306    	; 0x1412 <vfscanf+0x222>
    12e0:	84 e5       	ldi	r24, 0x54	; 84
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	63 2f       	mov	r22, r19
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	39 83       	std	Y+1, r19	; 0x01
    12ea:	0e 94 27 0a 	call	0x144e	; 0x144e <strchr_P>
    12ee:	39 81       	ldd	r19, Y+1	; 0x01
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <vfscanf+0x106>
    12f4:	8e c0       	rjmp	.+284    	; 0x1412 <vfscanf+0x222>
    12f6:	81 2f       	mov	r24, r17
    12f8:	10 fd       	sbrc	r17, 0
    12fa:	08 c0       	rjmp	.+16     	; 0x130c <vfscanf+0x11c>
    12fc:	f3 01       	movw	r30, r6
    12fe:	40 80       	ld	r4, Z
    1300:	51 80       	ldd	r5, Z+1	; 0x01
    1302:	42 e0       	ldi	r20, 0x02	; 2
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	64 0e       	add	r6, r20
    1308:	75 1e       	adc	r7, r21
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <vfscanf+0x120>
    130c:	44 24       	eor	r4, r4
    130e:	55 24       	eor	r5, r5
    1310:	3e 36       	cpi	r19, 0x6E	; 110
    1312:	51 f4       	brne	.+20     	; 0x1328 <vfscanf+0x138>
    1314:	f7 01       	movw	r30, r14
    1316:	46 81       	ldd	r20, Z+6	; 0x06
    1318:	57 81       	ldd	r21, Z+7	; 0x07
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	c2 01       	movw	r24, r4
    1320:	21 2f       	mov	r18, r17
    1322:	0e 94 63 07 	call	0xec6	; 0xec6 <putval>
    1326:	67 c0       	rjmp	.+206    	; 0x13f6 <vfscanf+0x206>
    1328:	33 36       	cpi	r19, 0x63	; 99
    132a:	91 f4       	brne	.+36     	; 0x1350 <vfscanf+0x160>
    132c:	81 fd       	sbrc	r24, 1
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <vfscanf+0x144>
    1330:	99 24       	eor	r9, r9
    1332:	93 94       	inc	r9
    1334:	c7 01       	movw	r24, r14
    1336:	0e 94 48 0a 	call	0x1490	; 0x1490 <fgetc>
    133a:	97 fd       	sbrc	r25, 7
    133c:	68 c0       	rjmp	.+208    	; 0x140e <vfscanf+0x21e>
    133e:	41 14       	cp	r4, r1
    1340:	51 04       	cpc	r5, r1
    1342:	19 f0       	breq	.+6      	; 0x134a <vfscanf+0x15a>
    1344:	f2 01       	movw	r30, r4
    1346:	81 93       	st	Z+, r24
    1348:	2f 01       	movw	r4, r30
    134a:	9a 94       	dec	r9
    134c:	99 f7       	brne	.-26     	; 0x1334 <vfscanf+0x144>
    134e:	51 c0       	rjmp	.+162    	; 0x13f2 <vfscanf+0x202>
    1350:	3b 35       	cpi	r19, 0x5B	; 91
    1352:	59 f4       	brne	.+22     	; 0x136a <vfscanf+0x17a>
    1354:	c7 01       	movw	r24, r14
    1356:	69 2d       	mov	r22, r9
    1358:	a2 01       	movw	r20, r4
    135a:	96 01       	movw	r18, r12
    135c:	0e 94 4f 08 	call	0x109e	; 0x109e <conv_brk>
    1360:	6c 01       	movw	r12, r24
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	09 f0       	breq	.+2      	; 0x1368 <vfscanf+0x178>
    1366:	45 c0       	rjmp	.+138    	; 0x13f2 <vfscanf+0x202>
    1368:	3f c0       	rjmp	.+126    	; 0x13e8 <vfscanf+0x1f8>
    136a:	c7 01       	movw	r24, r14
    136c:	39 83       	std	Y+1, r19	; 0x01
    136e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <skip_spaces>
    1372:	39 81       	ldd	r19, Y+1	; 0x01
    1374:	97 fd       	sbrc	r25, 7
    1376:	4b c0       	rjmp	.+150    	; 0x140e <vfscanf+0x21e>
    1378:	3f 36       	cpi	r19, 0x6F	; 111
    137a:	59 f1       	breq	.+86     	; 0x13d2 <vfscanf+0x1e2>
    137c:	30 37       	cpi	r19, 0x70	; 112
    137e:	28 f4       	brcc	.+10     	; 0x138a <vfscanf+0x19a>
    1380:	34 36       	cpi	r19, 0x64	; 100
    1382:	29 f1       	breq	.+74     	; 0x13ce <vfscanf+0x1de>
    1384:	39 36       	cpi	r19, 0x69	; 105
    1386:	39 f5       	brne	.+78     	; 0x13d6 <vfscanf+0x1e6>
    1388:	27 c0       	rjmp	.+78     	; 0x13d8 <vfscanf+0x1e8>
    138a:	33 37       	cpi	r19, 0x73	; 115
    138c:	19 f0       	breq	.+6      	; 0x1394 <vfscanf+0x1a4>
    138e:	35 37       	cpi	r19, 0x75	; 117
    1390:	11 f5       	brne	.+68     	; 0x13d6 <vfscanf+0x1e6>
    1392:	1d c0       	rjmp	.+58     	; 0x13ce <vfscanf+0x1de>
    1394:	c7 01       	movw	r24, r14
    1396:	0e 94 48 0a 	call	0x1490	; 0x1490 <fgetc>
    139a:	5c 01       	movw	r10, r24
    139c:	97 fd       	sbrc	r25, 7
    139e:	11 c0       	rjmp	.+34     	; 0x13c2 <vfscanf+0x1d2>
    13a0:	0e 94 1f 0a 	call	0x143e	; 0x143e <isspace>
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	29 f0       	breq	.+10     	; 0x13b2 <vfscanf+0x1c2>
    13a8:	c5 01       	movw	r24, r10
    13aa:	b7 01       	movw	r22, r14
    13ac:	0e 94 b6 0a 	call	0x156c	; 0x156c <ungetc>
    13b0:	08 c0       	rjmp	.+16     	; 0x13c2 <vfscanf+0x1d2>
    13b2:	41 14       	cp	r4, r1
    13b4:	51 04       	cpc	r5, r1
    13b6:	19 f0       	breq	.+6      	; 0x13be <vfscanf+0x1ce>
    13b8:	f2 01       	movw	r30, r4
    13ba:	a1 92       	st	Z+, r10
    13bc:	2f 01       	movw	r4, r30
    13be:	9a 94       	dec	r9
    13c0:	49 f7       	brne	.-46     	; 0x1394 <vfscanf+0x1a4>
    13c2:	41 14       	cp	r4, r1
    13c4:	51 04       	cpc	r5, r1
    13c6:	a9 f0       	breq	.+42     	; 0x13f2 <vfscanf+0x202>
    13c8:	f2 01       	movw	r30, r4
    13ca:	10 82       	st	Z, r1
    13cc:	12 c0       	rjmp	.+36     	; 0x13f2 <vfscanf+0x202>
    13ce:	10 62       	ori	r17, 0x20	; 32
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <vfscanf+0x1e8>
    13d2:	10 61       	ori	r17, 0x10	; 16
    13d4:	01 c0       	rjmp	.+2      	; 0x13d8 <vfscanf+0x1e8>
    13d6:	10 64       	ori	r17, 0x40	; 64
    13d8:	c7 01       	movw	r24, r14
    13da:	69 2d       	mov	r22, r9
    13dc:	a2 01       	movw	r20, r4
    13de:	21 2f       	mov	r18, r17
    13e0:	0e 94 b9 07 	call	0xf72	; 0xf72 <conv_int>
    13e4:	88 23       	and	r24, r24
    13e6:	29 f4       	brne	.+10     	; 0x13f2 <vfscanf+0x202>
    13e8:	f7 01       	movw	r30, r14
    13ea:	83 81       	ldd	r24, Z+3	; 0x03
    13ec:	80 73       	andi	r24, 0x30	; 48
    13ee:	79 f4       	brne	.+30     	; 0x140e <vfscanf+0x21e>
    13f0:	10 c0       	rjmp	.+32     	; 0x1412 <vfscanf+0x222>
    13f2:	10 ff       	sbrs	r17, 0
    13f4:	0f 5f       	subi	r16, 0xFF	; 255
    13f6:	f7 01       	movw	r30, r14
    13f8:	a3 80       	ldd	r10, Z+3	; 0x03
    13fa:	f6 01       	movw	r30, r12
    13fc:	a3 fc       	sbrc	r10, 3
    13fe:	15 91       	lpm	r17, Z+
    1400:	a3 fe       	sbrs	r10, 3
    1402:	11 91       	ld	r17, Z+
    1404:	6f 01       	movw	r12, r30
    1406:	11 23       	and	r17, r17
    1408:	09 f0       	breq	.+2      	; 0x140c <vfscanf+0x21c>
    140a:	0c cf       	rjmp	.-488    	; 0x1224 <vfscanf+0x34>
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <vfscanf+0x222>
    140e:	00 23       	and	r16, r16
    1410:	11 f0       	breq	.+4      	; 0x1416 <vfscanf+0x226>
    1412:	10 e0       	ldi	r17, 0x00	; 0
    1414:	02 c0       	rjmp	.+4      	; 0x141a <vfscanf+0x22a>
    1416:	0f ef       	ldi	r16, 0xFF	; 255
    1418:	1f ef       	ldi	r17, 0xFF	; 255
    141a:	c8 01       	movw	r24, r16
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	ff 90       	pop	r15
    1428:	ef 90       	pop	r14
    142a:	df 90       	pop	r13
    142c:	cf 90       	pop	r12
    142e:	bf 90       	pop	r11
    1430:	af 90       	pop	r10
    1432:	9f 90       	pop	r9
    1434:	7f 90       	pop	r7
    1436:	6f 90       	pop	r6
    1438:	5f 90       	pop	r5
    143a:	4f 90       	pop	r4
    143c:	08 95       	ret

0000143e <isspace>:
    143e:	91 11       	cpse	r25, r1
    1440:	0e c1       	rjmp	.+540    	; 0x165e <__ctype_isfalse>
    1442:	80 32       	cpi	r24, 0x20	; 32
    1444:	19 f0       	breq	.+6      	; 0x144c <isspace+0xe>
    1446:	89 50       	subi	r24, 0x09	; 9
    1448:	85 50       	subi	r24, 0x05	; 5
    144a:	d0 f7       	brcc	.-12     	; 0x1440 <isspace+0x2>
    144c:	08 95       	ret

0000144e <strchr_P>:
    144e:	fc 01       	movw	r30, r24
    1450:	05 90       	lpm	r0, Z+
    1452:	06 16       	cp	r0, r22
    1454:	21 f0       	breq	.+8      	; 0x145e <strchr_P+0x10>
    1456:	00 20       	and	r0, r0
    1458:	d9 f7       	brne	.-10     	; 0x1450 <strchr_P+0x2>
    145a:	c0 01       	movw	r24, r0
    145c:	08 95       	ret
    145e:	31 97       	sbiw	r30, 0x01	; 1
    1460:	cf 01       	movw	r24, r30
    1462:	08 95       	ret

00001464 <strnlen_P>:
    1464:	fc 01       	movw	r30, r24
    1466:	05 90       	lpm	r0, Z+
    1468:	61 50       	subi	r22, 0x01	; 1
    146a:	70 40       	sbci	r23, 0x00	; 0
    146c:	01 10       	cpse	r0, r1
    146e:	d8 f7       	brcc	.-10     	; 0x1466 <strnlen_P+0x2>
    1470:	80 95       	com	r24
    1472:	90 95       	com	r25
    1474:	8e 0f       	add	r24, r30
    1476:	9f 1f       	adc	r25, r31
    1478:	08 95       	ret

0000147a <strnlen>:
    147a:	fc 01       	movw	r30, r24
    147c:	61 50       	subi	r22, 0x01	; 1
    147e:	70 40       	sbci	r23, 0x00	; 0
    1480:	01 90       	ld	r0, Z+
    1482:	01 10       	cpse	r0, r1
    1484:	d8 f7       	brcc	.-10     	; 0x147c <strnlen+0x2>
    1486:	80 95       	com	r24
    1488:	90 95       	com	r25
    148a:	8e 0f       	add	r24, r30
    148c:	9f 1f       	adc	r25, r31
    148e:	08 95       	ret

00001490 <fgetc>:
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	ec 01       	movw	r28, r24
    1496:	3b 81       	ldd	r19, Y+3	; 0x03
    1498:	30 ff       	sbrs	r19, 0
    149a:	36 c0       	rjmp	.+108    	; 0x1508 <fgetc+0x78>
    149c:	36 ff       	sbrs	r19, 6
    149e:	09 c0       	rjmp	.+18     	; 0x14b2 <fgetc+0x22>
    14a0:	3f 7b       	andi	r19, 0xBF	; 191
    14a2:	3b 83       	std	Y+3, r19	; 0x03
    14a4:	8e 81       	ldd	r24, Y+6	; 0x06
    14a6:	9f 81       	ldd	r25, Y+7	; 0x07
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	9f 83       	std	Y+7, r25	; 0x07
    14ac:	8e 83       	std	Y+6, r24	; 0x06
    14ae:	2a 81       	ldd	r18, Y+2	; 0x02
    14b0:	29 c0       	rjmp	.+82     	; 0x1504 <fgetc+0x74>
    14b2:	32 ff       	sbrs	r19, 2
    14b4:	0f c0       	rjmp	.+30     	; 0x14d4 <fgetc+0x44>
    14b6:	e8 81       	ld	r30, Y
    14b8:	f9 81       	ldd	r31, Y+1	; 0x01
    14ba:	80 81       	ld	r24, Z
    14bc:	99 27       	eor	r25, r25
    14be:	87 fd       	sbrc	r24, 7
    14c0:	90 95       	com	r25
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	19 f4       	brne	.+6      	; 0x14cc <fgetc+0x3c>
    14c6:	30 62       	ori	r19, 0x20	; 32
    14c8:	3b 83       	std	Y+3, r19	; 0x03
    14ca:	1e c0       	rjmp	.+60     	; 0x1508 <fgetc+0x78>
    14cc:	31 96       	adiw	r30, 0x01	; 1
    14ce:	f9 83       	std	Y+1, r31	; 0x01
    14d0:	e8 83       	st	Y, r30
    14d2:	11 c0       	rjmp	.+34     	; 0x14f6 <fgetc+0x66>
    14d4:	ea 85       	ldd	r30, Y+10	; 0x0a
    14d6:	fb 85       	ldd	r31, Y+11	; 0x0b
    14d8:	ce 01       	movw	r24, r28
    14da:	09 95       	icall
    14dc:	97 ff       	sbrs	r25, 7
    14de:	0b c0       	rjmp	.+22     	; 0x14f6 <fgetc+0x66>
    14e0:	2b 81       	ldd	r18, Y+3	; 0x03
    14e2:	3f ef       	ldi	r19, 0xFF	; 255
    14e4:	8f 3f       	cpi	r24, 0xFF	; 255
    14e6:	93 07       	cpc	r25, r19
    14e8:	11 f4       	brne	.+4      	; 0x14ee <fgetc+0x5e>
    14ea:	80 e1       	ldi	r24, 0x10	; 16
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <fgetc+0x60>
    14ee:	80 e2       	ldi	r24, 0x20	; 32
    14f0:	82 2b       	or	r24, r18
    14f2:	8b 83       	std	Y+3, r24	; 0x03
    14f4:	09 c0       	rjmp	.+18     	; 0x1508 <fgetc+0x78>
    14f6:	2e 81       	ldd	r18, Y+6	; 0x06
    14f8:	3f 81       	ldd	r19, Y+7	; 0x07
    14fa:	2f 5f       	subi	r18, 0xFF	; 255
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    14fe:	3f 83       	std	Y+7, r19	; 0x07
    1500:	2e 83       	std	Y+6, r18	; 0x06
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	02 c0       	rjmp	.+4      	; 0x150c <fgetc+0x7c>
    1508:	2f ef       	ldi	r18, 0xFF	; 255
    150a:	3f ef       	ldi	r19, 0xFF	; 255
    150c:	c9 01       	movw	r24, r18
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	08 95       	ret

00001514 <fputc>:
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	8c 01       	movw	r16, r24
    151e:	eb 01       	movw	r28, r22
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	81 ff       	sbrs	r24, 1
    1524:	1b c0       	rjmp	.+54     	; 0x155c <fputc+0x48>
    1526:	82 ff       	sbrs	r24, 2
    1528:	0d c0       	rjmp	.+26     	; 0x1544 <fputc+0x30>
    152a:	2e 81       	ldd	r18, Y+6	; 0x06
    152c:	3f 81       	ldd	r19, Y+7	; 0x07
    152e:	8c 81       	ldd	r24, Y+4	; 0x04
    1530:	9d 81       	ldd	r25, Y+5	; 0x05
    1532:	28 17       	cp	r18, r24
    1534:	39 07       	cpc	r19, r25
    1536:	64 f4       	brge	.+24     	; 0x1550 <fputc+0x3c>
    1538:	e8 81       	ld	r30, Y
    153a:	f9 81       	ldd	r31, Y+1	; 0x01
    153c:	01 93       	st	Z+, r16
    153e:	f9 83       	std	Y+1, r31	; 0x01
    1540:	e8 83       	st	Y, r30
    1542:	06 c0       	rjmp	.+12     	; 0x1550 <fputc+0x3c>
    1544:	e8 85       	ldd	r30, Y+8	; 0x08
    1546:	f9 85       	ldd	r31, Y+9	; 0x09
    1548:	80 2f       	mov	r24, r16
    154a:	09 95       	icall
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	31 f4       	brne	.+12     	; 0x155c <fputc+0x48>
    1550:	8e 81       	ldd	r24, Y+6	; 0x06
    1552:	9f 81       	ldd	r25, Y+7	; 0x07
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	9f 83       	std	Y+7, r25	; 0x07
    1558:	8e 83       	std	Y+6, r24	; 0x06
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <fputc+0x4c>
    155c:	0f ef       	ldi	r16, 0xFF	; 255
    155e:	1f ef       	ldi	r17, 0xFF	; 255
    1560:	c8 01       	movw	r24, r16
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	08 95       	ret

0000156c <ungetc>:
    156c:	fb 01       	movw	r30, r22
    156e:	23 81       	ldd	r18, Z+3	; 0x03
    1570:	20 ff       	sbrs	r18, 0
    1572:	13 c0       	rjmp	.+38     	; 0x159a <ungetc+0x2e>
    1574:	26 fd       	sbrc	r18, 6
    1576:	11 c0       	rjmp	.+34     	; 0x159a <ungetc+0x2e>
    1578:	3f ef       	ldi	r19, 0xFF	; 255
    157a:	8f 3f       	cpi	r24, 0xFF	; 255
    157c:	93 07       	cpc	r25, r19
    157e:	69 f0       	breq	.+26     	; 0x159a <ungetc+0x2e>
    1580:	82 83       	std	Z+2, r24	; 0x02
    1582:	20 64       	ori	r18, 0x40	; 64
    1584:	2f 7d       	andi	r18, 0xDF	; 223
    1586:	23 83       	std	Z+3, r18	; 0x03
    1588:	26 81       	ldd	r18, Z+6	; 0x06
    158a:	37 81       	ldd	r19, Z+7	; 0x07
    158c:	21 50       	subi	r18, 0x01	; 1
    158e:	30 40       	sbci	r19, 0x00	; 0
    1590:	37 83       	std	Z+7, r19	; 0x07
    1592:	26 83       	std	Z+6, r18	; 0x06
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	02 c0       	rjmp	.+4      	; 0x159e <ungetc+0x32>
    159a:	2f ef       	ldi	r18, 0xFF	; 255
    159c:	3f ef       	ldi	r19, 0xFF	; 255
    159e:	c9 01       	movw	r24, r18
    15a0:	08 95       	ret

000015a2 <__ultoa_invert>:
    15a2:	fa 01       	movw	r30, r20
    15a4:	aa 27       	eor	r26, r26
    15a6:	28 30       	cpi	r18, 0x08	; 8
    15a8:	51 f1       	breq	.+84     	; 0x15fe <__ultoa_invert+0x5c>
    15aa:	20 31       	cpi	r18, 0x10	; 16
    15ac:	81 f1       	breq	.+96     	; 0x160e <__ultoa_invert+0x6c>
    15ae:	e8 94       	clt
    15b0:	6f 93       	push	r22
    15b2:	6e 7f       	andi	r22, 0xFE	; 254
    15b4:	6e 5f       	subi	r22, 0xFE	; 254
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255
    15b8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ba:	9f 4f       	sbci	r25, 0xFF	; 255
    15bc:	af 4f       	sbci	r26, 0xFF	; 255
    15be:	b1 e0       	ldi	r27, 0x01	; 1
    15c0:	3e d0       	rcall	.+124    	; 0x163e <__ultoa_invert+0x9c>
    15c2:	b4 e0       	ldi	r27, 0x04	; 4
    15c4:	3c d0       	rcall	.+120    	; 0x163e <__ultoa_invert+0x9c>
    15c6:	67 0f       	add	r22, r23
    15c8:	78 1f       	adc	r23, r24
    15ca:	89 1f       	adc	r24, r25
    15cc:	9a 1f       	adc	r25, r26
    15ce:	a1 1d       	adc	r26, r1
    15d0:	68 0f       	add	r22, r24
    15d2:	79 1f       	adc	r23, r25
    15d4:	8a 1f       	adc	r24, r26
    15d6:	91 1d       	adc	r25, r1
    15d8:	a1 1d       	adc	r26, r1
    15da:	6a 0f       	add	r22, r26
    15dc:	71 1d       	adc	r23, r1
    15de:	81 1d       	adc	r24, r1
    15e0:	91 1d       	adc	r25, r1
    15e2:	a1 1d       	adc	r26, r1
    15e4:	20 d0       	rcall	.+64     	; 0x1626 <__ultoa_invert+0x84>
    15e6:	09 f4       	brne	.+2      	; 0x15ea <__ultoa_invert+0x48>
    15e8:	68 94       	set
    15ea:	3f 91       	pop	r19
    15ec:	2a e0       	ldi	r18, 0x0A	; 10
    15ee:	26 9f       	mul	r18, r22
    15f0:	11 24       	eor	r1, r1
    15f2:	30 19       	sub	r19, r0
    15f4:	30 5d       	subi	r19, 0xD0	; 208
    15f6:	31 93       	st	Z+, r19
    15f8:	de f6       	brtc	.-74     	; 0x15b0 <__ultoa_invert+0xe>
    15fa:	cf 01       	movw	r24, r30
    15fc:	08 95       	ret
    15fe:	46 2f       	mov	r20, r22
    1600:	47 70       	andi	r20, 0x07	; 7
    1602:	40 5d       	subi	r20, 0xD0	; 208
    1604:	41 93       	st	Z+, r20
    1606:	b3 e0       	ldi	r27, 0x03	; 3
    1608:	0f d0       	rcall	.+30     	; 0x1628 <__ultoa_invert+0x86>
    160a:	c9 f7       	brne	.-14     	; 0x15fe <__ultoa_invert+0x5c>
    160c:	f6 cf       	rjmp	.-20     	; 0x15fa <__ultoa_invert+0x58>
    160e:	46 2f       	mov	r20, r22
    1610:	4f 70       	andi	r20, 0x0F	; 15
    1612:	40 5d       	subi	r20, 0xD0	; 208
    1614:	4a 33       	cpi	r20, 0x3A	; 58
    1616:	18 f0       	brcs	.+6      	; 0x161e <__ultoa_invert+0x7c>
    1618:	49 5d       	subi	r20, 0xD9	; 217
    161a:	31 fd       	sbrc	r19, 1
    161c:	40 52       	subi	r20, 0x20	; 32
    161e:	41 93       	st	Z+, r20
    1620:	02 d0       	rcall	.+4      	; 0x1626 <__ultoa_invert+0x84>
    1622:	a9 f7       	brne	.-22     	; 0x160e <__ultoa_invert+0x6c>
    1624:	ea cf       	rjmp	.-44     	; 0x15fa <__ultoa_invert+0x58>
    1626:	b4 e0       	ldi	r27, 0x04	; 4
    1628:	a6 95       	lsr	r26
    162a:	97 95       	ror	r25
    162c:	87 95       	ror	r24
    162e:	77 95       	ror	r23
    1630:	67 95       	ror	r22
    1632:	ba 95       	dec	r27
    1634:	c9 f7       	brne	.-14     	; 0x1628 <__ultoa_invert+0x86>
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	61 05       	cpc	r22, r1
    163a:	71 05       	cpc	r23, r1
    163c:	08 95       	ret
    163e:	9b 01       	movw	r18, r22
    1640:	ac 01       	movw	r20, r24
    1642:	0a 2e       	mov	r0, r26
    1644:	06 94       	lsr	r0
    1646:	57 95       	ror	r21
    1648:	47 95       	ror	r20
    164a:	37 95       	ror	r19
    164c:	27 95       	ror	r18
    164e:	ba 95       	dec	r27
    1650:	c9 f7       	brne	.-14     	; 0x1644 <__ultoa_invert+0xa2>
    1652:	62 0f       	add	r22, r18
    1654:	73 1f       	adc	r23, r19
    1656:	84 1f       	adc	r24, r20
    1658:	95 1f       	adc	r25, r21
    165a:	a0 1d       	adc	r26, r0
    165c:	08 95       	ret

0000165e <__ctype_isfalse>:
    165e:	99 27       	eor	r25, r25
    1660:	88 27       	eor	r24, r24

00001662 <__ctype_istrue>:
    1662:	08 95       	ret

00001664 <__prologue_saves__>:
    1664:	2f 92       	push	r2
    1666:	3f 92       	push	r3
    1668:	4f 92       	push	r4
    166a:	5f 92       	push	r5
    166c:	6f 92       	push	r6
    166e:	7f 92       	push	r7
    1670:	8f 92       	push	r8
    1672:	9f 92       	push	r9
    1674:	af 92       	push	r10
    1676:	bf 92       	push	r11
    1678:	cf 92       	push	r12
    167a:	df 92       	push	r13
    167c:	ef 92       	push	r14
    167e:	ff 92       	push	r15
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	ca 1b       	sub	r28, r26
    168e:	db 0b       	sbc	r29, r27
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	09 94       	ijmp

0000169c <__epilogue_restores__>:
    169c:	2a 88       	ldd	r2, Y+18	; 0x12
    169e:	39 88       	ldd	r3, Y+17	; 0x11
    16a0:	48 88       	ldd	r4, Y+16	; 0x10
    16a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    16a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    16a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    16a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    16aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    16ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    16ae:	b9 84       	ldd	r11, Y+9	; 0x09
    16b0:	c8 84       	ldd	r12, Y+8	; 0x08
    16b2:	df 80       	ldd	r13, Y+7	; 0x07
    16b4:	ee 80       	ldd	r14, Y+6	; 0x06
    16b6:	fd 80       	ldd	r15, Y+5	; 0x05
    16b8:	0c 81       	ldd	r16, Y+4	; 0x04
    16ba:	1b 81       	ldd	r17, Y+3	; 0x03
    16bc:	aa 81       	ldd	r26, Y+2	; 0x02
    16be:	b9 81       	ldd	r27, Y+1	; 0x01
    16c0:	ce 0f       	add	r28, r30
    16c2:	d1 1d       	adc	r29, r1
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	ed 01       	movw	r28, r26
    16d0:	08 95       	ret

000016d2 <_exit>:
    16d2:	f8 94       	cli

000016d4 <__stop_program>:
    16d4:	ff cf       	rjmp	.-2      	; 0x16d4 <__stop_program>
